<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="convMigrationMapper">
	<update id="MIGRATION_MOB_CNVRS_HH_STATS" parameterType="Map">
		DELETE FROM BILLING.MOB_CNVRS_HH_STATS WHERE STATS_DTTM = #{stats_dttm};

		INSERT INTO BILLING.MOB_CNVRS_HH_STATS(
		STATS_DTTM, STATS_HH, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, SITE_CODE, ADVER_ID, MEDIA_SCRIPT_NO, ITL_TP_CODE, SESION_SELNG_YN, DIRECT_YN, CLICK_TP, CNVRS_TP_CODE, MOB_ORDER_YN, ORDER_AMT, ORDER_CNT, ORDER_QY, TRGT_ORDER_AMT, TRGT_ORDER_CNT, TRGT_ORDER_QY
		)
		SELECT * FROM (
		SELECT STATS_DTTM, STATS_HH, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, SITE_CODE, ADVER_ID, MEDIA_SCRIPT_NO, ITL_TP_CODE, SESION_SELNG_YN, DIRECT_YN, CLICK_TP, CNVRS_TP_CODE, MOB_ORDER_YN
		, SUM(ORDER_AMT)ORDER_AMT, SUM(ORDER_CNT)ORDER_CNT, SUM(ORDER_QY)ORDER_QY
		, SUM(CASE WHEN ADVRTS_TP_CODE IN ('04','10','16','17','34','37','40','41','42','47','49','50','54','55') THEN ORDER_AMT ELSE 0 END) AS TRGT_ORDER_AMT
		, SUM(CASE WHEN ADVRTS_TP_CODE IN ('04','10','16','17','34','37','40','41','42','47','49','50','54','55') THEN ORDER_CNT ELSE 0 END) AS TRGT_ORDER_CNT
		, SUM(CASE WHEN ADVRTS_TP_CODE IN ('04','10','16','17','34','37','40','41','42','47','49','50','54','55') THEN ORDER_QY ELSE 0 END) AS TRGT_ORDER_QY
		FROM (
		SELECT STATS_DTTM, DATE_FORMAT(REG_DTTM , '%H')STATS_HH, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, SITE_CODE, ADVER_ID, MEDIA_SCRIPT_NO
		, CASE
		WHEN userid IN('kakao', 'mkakao') THEN '03'
		WHEN userid IN('agooglemedia', 'googlemedia', 'mgooglemedia') THEN '04'
		WHEN userid IN('igaworks', 'igaworks02','igaworksm','igaworksp') THEN '08'
		WHEN userid IN('rtbmobon') THEN '10'
		ELSE '01' END ITL_TP_CODE, SESION_SELNG_YN, DIRECT_YN, CLICK_TP, CNVRS_TP_CODE, MOB_ORDER_YN
		, ORDER_AMT, ORDER_CNT, ORDER_QY, 0 TRGT_ORDER_AMT, 0 TRGT_ORDER_CNT, 0 TRGT_ORDER_QY
		FROM BILLING.MOB_CNVRS_NCL A LEFT JOIN dreamsearch.media_script B ON A.MEDIA_SCRIPT_NO =B.NO
		WHERE STATS_DTTM = #{stats_dttm}
		)A
		GROUP BY STATS_DTTM, STATS_HH, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, SITE_CODE, ADVER_ID, MEDIA_SCRIPT_NO, ITL_TP_CODE, SESION_SELNG_YN, DIRECT_YN, CLICK_TP, CNVRS_TP_CODE, MOB_ORDER_YN
		)AA
		ON DUPLICATE KEY UPDATE
		ORDER_AMT=AA.ORDER_AMT, ORDER_CNT=AA.ORDER_CNT, ORDER_QY=AA.ORDER_QY, TRGT_ORDER_AMT=AA.TRGT_ORDER_AMT, TRGT_ORDER_CNT=AA.TRGT_ORDER_CNT, TRGT_ORDER_QY=AA.TRGT_ORDER_QY
		;

	</update>
	<update id="MIGRATION_MOB_CNVRS_RENEW_HH_STATS" parameterType="Map">
		DELETE FROM BILLING.MOB_CNVRS_RENEW_HH_STATS WHERE STATS_DTTM = #{stats_dttm};


		INSERT INTO BILLING.MOB_CNVRS_RENEW_HH_STATS(
		STATS_DTTM,STATS_HH,PLTFOM_TP_CODE,ADVRTS_PRDT_CODE,ADVRTS_TP_CODE,SITE_CODE,ADVER_ID,PAR_NO,MEDIA_ID,MEDIA_TP_CODE,TRK_TP_CODE,ITL_TP_CODE,CNVRS_TP_CODE,SESION_SELNG_YN,SESION_SELNG2_YN,DIRECT_YN, MOB_ORDER_YN
		,ORDER_AMT,ORDER_CNT,ORDER_QY,TRGT_ORDER_AMT,TRGT_ORDER_CNT,TRGT_ORDER_QY
		)
		SELECT * FROM (
		SELECT STATS_DTTM, STATS_HH, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, SITE_CODE, ADVER_ID, PAR_NO, MEDIA_ID, MEDIA_TP_CODE, TRK_TP_CODE, ITL_TP_CODE, CNVRS_TP_CODE, SESION_SELNG_YN, SESION_SELNG2_YN, DIRECT_YN, MOB_ORDER_YN
		, SUM(ORDER_AMT)ORDER_AMT, SUM(ORDER_CNT)ORDER_CNT, SUM(ORDER_QY)ORDER_QY
		, SUM(CASE WHEN ADVRTS_TP_CODE IN ('04','10','16','17','34','37','40','41','42','47','49','50','54','55') THEN ORDER_AMT ELSE 0 END) AS TRGT_ORDER_AMT
		, SUM(CASE WHEN ADVRTS_TP_CODE IN ('04','10','16','17','34','37','40','41','42','47','49','50','54','55') THEN ORDER_CNT ELSE 0 END) AS TRGT_ORDER_CNT
		, SUM(CASE WHEN ADVRTS_TP_CODE IN ('04','10','16','17','34','37','40','41','42','47','49','50','54','55') THEN ORDER_QY ELSE 0 END) AS TRGT_ORDER_QY
		FROM (
		SELECT STATS_DTTM, DATE_FORMAT(REG_DTTM , '%H')STATS_HH, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, SITE_CODE, ADVER_ID, PAR_NO, MEDIA_ID, MEDIA_TP_CODE, TRK_TP_CODE, ITL_TP_CODE, CNVRS_TP_CODE, SESION_SELNG_YN
		, SESION_SELNG2_YN, DIRECT_YN, MOB_ORDER_YN
		, SUM(ORDER_AMT)ORDER_AMT, SUM(ORDER_CNT)ORDER_CNT, SUM(ORDER_QY)ORDER_QY, SUM(TRGT_ORDER_AMT)TRGT_ORDER_AMT, SUM(TRGT_ORDER_CNT)TRGT_ORDER_CNT, SUM(TRGT_ORDER_QY)TRGT_ORDER_QY
		FROM BILLING.MOB_CNVRS_RENEW_NCL
		WHERE STATS_DTTM = #{stats_dttm}
		GROUP BY STATS_DTTM, DATE_FORMAT(REG_DTTM , '%H'), PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, SITE_CODE, ADVER_ID, PAR_NO, MEDIA_ID, MEDIA_TP_CODE, TRK_TP_CODE, ITL_TP_CODE, CNVRS_TP_CODE, SESION_SELNG_YN
		, SESION_SELNG2_YN, DIRECT_YN, MOB_ORDER_YN
		) A
		GROUP BY STATS_DTTM, STATS_HH, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, SITE_CODE, ADVER_ID, PAR_NO, MEDIA_ID, MEDIA_TP_CODE, TRK_TP_CODE, ITL_TP_CODE, CNVRS_TP_CODE
		, SESION_SELNG_YN, SESION_SELNG2_YN, DIRECT_YN ,MOB_ORDER_YN
		)AA
		ON DUPLICATE KEY UPDATE
		ORDER_AMT=AA.ORDER_AMT, ORDER_CNT=AA.ORDER_CNT, ORDER_QY=AA.ORDER_QY, TRGT_ORDER_AMT=AA.TRGT_ORDER_AMT, TRGT_ORDER_CNT=AA.TRGT_ORDER_CNT, TRGT_ORDER_QY=AA.TRGT_ORDER_QY
		;
	</update>

	<update id="MIGRATION_MOB_CNVRS_RENEW_COM_STATS" parameterType="Map">
		DELETE FROM BILLING.MOB_CNVRS_RENEW_COM_STATS WHERE STATS_DTTM = #{stats_dttm};
		
		
		INSERT INTO BILLING.MOB_CNVRS_RENEW_COM_STATS(
		STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, TRK_TP_CODE, MEDIA_TP_CODE, ITL_TP_CODE, SESION_SELNG_YN, SESION_SELNG2_YN, DIRECT_YN, CNVRS_TP_CODE, MOB_ORDER_YN,
		ORDER_AMT, ORDER_CNT, ORDER_QY, TRGT_ORDER_AMT, TRGT_ORDER_CNT, TRGT_ORDER_QY, REG_USER_ID
		) 
		SELECT * FROM (
			SELECT 
				HHSTATS.STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, TRK_TP_CODE, MEDIA_TP_CODE, ITL_TP_CODE, SESION_SELNG_YN, SESION_SELNG2_YN, DIRECT_YN, CNVRS_TP_CODE, MOB_ORDER_YN
				, SUM(ORDER_AMT) AS ORDER_AMT, SUM(ORDER_CNT) AS ORDER_CNT
				, CASE WHEN SUM(ORDER_QY)>2000000000 THEN 2000000000 ELSE SUM(ORDER_QY) END AS ORDER_QY
				, SUM(TRGT_ORDER_AMT) AS TRGT_ORDER_AMT, SUM(TRGT_ORDER_CNT) AS TRGT_ORDER_CNT
				, CASE WHEN SUM(TRGT_ORDER_QY)>2000000000 THEN 2000000000 ELSE SUM(TRGT_ORDER_QY) END AS TRGT_ORDER_QY
				, REG_USER_ID
			FROM BILLING.MOB_CNVRS_RENEW_STATS AS HHSTATS
			WHERE STATS_DTTM = #{stats_dttm}
			GROUP BY
				HHSTATS.STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, TRK_TP_CODE, MEDIA_TP_CODE, ITL_TP_CODE, SESION_SELNG_YN, SESION_SELNG2_YN, DIRECT_YN, CNVRS_TP_CODE, MOB_ORDER_YN
		) AS RESULT
		ON  DUPLICATE KEY UPDATE 
			MOB_CNVRS_RENEW_COM_STATS.ORDER_AMT = RESULT.ORDER_AMT,
			MOB_CNVRS_RENEW_COM_STATS.ORDER_CNT = RESULT.ORDER_CNT,
			MOB_CNVRS_RENEW_COM_STATS.ORDER_QY  = RESULT.ORDER_QY,
			MOB_CNVRS_RENEW_COM_STATS.TRGT_ORDER_AMT = RESULT.TRGT_ORDER_AMT,
			MOB_CNVRS_RENEW_COM_STATS.TRGT_ORDER_CNT = RESULT.TRGT_ORDER_CNT,
			MOB_CNVRS_RENEW_COM_STATS.TRGT_ORDER_QY = RESULT.TRGT_ORDER_QY
			;
		
		
	</update>
	
	<update id="MIGRATION_MOB_CNVRS_RENEW_KPI_STATS" parameterType="Map">
		DELETE FROM BILLING.MOB_CNVRS_RENEW_KPI_STATS WHERE STATS_DTTM = #{stats_dttm};
		
		INSERT INTO BILLING.MOB_CNVRS_RENEW_KPI_STATS (
		STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, KPI_NO, ADVER_ID, PAR_NO, MEDIA_ID
		, MEDIA_TP_CODE, TRK_TP_CODE, ITL_TP_CODE, SESION_SELNG_YN, SESION_SELNG2_YN, DIRECT_YN, CNVRS_TP_CODE, MOB_ORDER_YN
		, ORDER_AMT, ORDER_CNT, ORDER_QY, TRGT_ORDER_AMT, TRGT_ORDER_CNT, TRGT_ORDER_QY, REG_USER_ID
		)
		SELECT STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, IFNULL(KPI_NO,0)KPI_NO, ADVER_ID, PAR_NO, MEDIA_ID
		, MEDIA_TP_CODE, TRK_TP_CODE, ITL_TP_CODE, SESION_SELNG_YN, SESION_SELNG2_YN, DIRECT_YN, CNVRS_TP_CODE, MOB_ORDER_YN
		, ORDER_AMT, ORDER_CNT, ORDER_QY, TRGT_ORDER_AMT, TRGT_ORDER_CNT, TRGT_ORDER_QY, REG_USER_ID
		FROM (
		SELECT
		HHSTATS.STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, KPI_NO, ADVER_ID, PAR_NO, MEDIA_ID
		, MEDIA_TP_CODE, TRK_TP_CODE, ITL_TP_CODE, SESION_SELNG_YN, SESION_SELNG2_YN, DIRECT_YN, CNVRS_TP_CODE, MOB_ORDER_YN
		, SUM(ORDER_AMT     ) AS ORDER_AMT
		, SUM(ORDER_CNT     ) AS ORDER_CNT
		, SUM(ORDER_QY      ) AS ORDER_QY
		, SUM(TRGT_ORDER_AMT) AS TRGT_ORDER_AMT
		, SUM(TRGT_ORDER_CNT) AS TRGT_ORDER_CNT
		, SUM(TRGT_ORDER_QY ) AS TRGT_ORDER_QY
		, REG_USER_ID
		FROM BILLING.MOB_CNVRS_RENEW_HH_STATS HHSTATS LEFT JOIN (SELECT SITE_CODE, KPI_NO FROM dreamsearch.adsite UNION ALL SELECT SITE_CODE, KPI_NO FROM dreamsearch.iadsite) A
		ON CONVERT(HHSTATS.SITE_CODE USING EUCKR)=A.SITE_CODE
		WHERE STATS_DTTM = #{stats_dttm}
		GROUP BY
		HHSTATS.STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, KPI_NO, ADVER_ID, PAR_NO, MEDIA_ID
		, TRK_TP_CODE, ITL_TP_CODE, SESION_SELNG_YN, SESION_SELNG2_YN, DIRECT_YN, CNVRS_TP_CODE, MOB_ORDER_YN
		) RESULT
		ON  DUPLICATE KEY UPDATE
		MOB_CNVRS_RENEW_KPI_STATS.ORDER_AMT = RESULT.ORDER_AMT
		, MOB_CNVRS_RENEW_KPI_STATS.ORDER_CNT = RESULT.ORDER_CNT
		, MOB_CNVRS_RENEW_KPI_STATS.ORDER_QY  = RESULT.ORDER_QY
		, MOB_CNVRS_RENEW_KPI_STATS.TRGT_ORDER_AMT = RESULT.TRGT_ORDER_AMT
		, MOB_CNVRS_RENEW_KPI_STATS.TRGT_ORDER_CNT = RESULT.TRGT_ORDER_CNT
		, MOB_CNVRS_RENEW_KPI_STATS.TRGT_ORDER_QY = RESULT.TRGT_ORDER_QY
		;
	</update>
	
	<update id="MIGRATION_MOB_CNVRS_RENEW_MEDIA_STATS" parameterType="Map">
		DELETE FROM BILLING.MOB_CNVRS_RENEW_MEDIA_STATS WHERE STATS_DTTM = #{stats_dttm};
		
		
		INSERT INTO BILLING.MOB_CNVRS_RENEW_MEDIA_STATS(
				STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, MEDIA_ID, TRK_TP_CODE, ITL_TP_CODE, SESION_SELNG_YN, SESION_SELNG2_YN, DIRECT_YN, CNVRS_TP_CODE, MOB_ORDER_YN
				, ORDER_AMT, ORDER_CNT, ORDER_QY, TRGT_ORDER_AMT, TRGT_ORDER_CNT, TRGT_ORDER_QY, REG_USER_ID, MEDIA_TP_CODE
		)
		SELECT * FROM (
			SELECT 
				S.STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, MEDIA_ID, TRK_TP_CODE, ITL_TP_CODE, SESION_SELNG_YN, SESION_SELNG2_YN, DIRECT_YN, CNVRS_TP_CODE, MOB_ORDER_YN
				, SUM(ORDER_AMT) AS ORDER_AMT, SUM(ORDER_CNT) AS ORDER_CNT
				, CASE WHEN SUM(ORDER_QY)>2000000000 THEN 2000000000 ELSE SUM(ORDER_QY) END AS ORDER_QY
				, SUM(TRGT_ORDER_AMT) AS TRGT_ORDER_AMT, SUM(TRGT_ORDER_CNT) AS TRGT_ORDER_CNT
				, CASE WHEN SUM(TRGT_ORDER_QY)>2000000000 THEN 2000000000 ELSE SUM(TRGT_ORDER_QY) END AS TRGT_ORDER_QY
				, REG_USER_ID, MEDIA_TP_CODE
			FROM BILLING.MOB_CNVRS_RENEW_HH_STATS AS S
			WHERE STATS_DTTM = #{stats_dttm}
			GROUP BY
				S.STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, MEDIA_ID, TRK_TP_CODE, ITL_TP_CODE, SESION_SELNG_YN, SESION_SELNG2_YN, DIRECT_YN, CNVRS_TP_CODE, MOB_ORDER_YN
		) AS RESULT
		ON  DUPLICATE KEY UPDATE 
			MOB_CNVRS_RENEW_MEDIA_STATS.ORDER_AMT = RESULT.ORDER_AMT,
			MOB_CNVRS_RENEW_MEDIA_STATS.ORDER_CNT = RESULT.ORDER_CNT,
			MOB_CNVRS_RENEW_MEDIA_STATS.ORDER_QY  = RESULT.ORDER_QY,
			MOB_CNVRS_RENEW_MEDIA_STATS.TRGT_ORDER_AMT = RESULT.TRGT_ORDER_AMT,
			MOB_CNVRS_RENEW_MEDIA_STATS.TRGT_ORDER_CNT = RESULT.TRGT_ORDER_CNT,
			MOB_CNVRS_RENEW_MEDIA_STATS.TRGT_ORDER_QY = RESULT.TRGT_ORDER_QY
			;
	</update>
	
	<update id="MIGRATION_MOB_CNVRS_RENEW_ADVER_STATS" parameterType="Map">
		DELETE FROM BILLING.MOB_CNVRS_RENEW_ADVER_STATS WHERE STATS_DTTM = #{stats_dttm};
		
		
		INSERT INTO BILLING.MOB_CNVRS_RENEW_ADVER_STATS (
		STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, ADVER_ID, TRK_TP_CODE, ITL_TP_CODE, SESION_SELNG_YN, SESION_SELNG2_YN, DIRECT_YN, CNVRS_TP_CODE,
		MOB_ORDER_YN, ORDER_AMT, ORDER_CNT, ORDER_QY, TRGT_ORDER_AMT, TRGT_ORDER_CNT, TRGT_ORDER_QY, REG_USER_ID
		)
		SELECT * FROM (
			SELECT 
				HHSTATS.STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, ADVER_ID, TRK_TP_CODE, ITL_TP_CODE, SESION_SELNG_YN, SESION_SELNG2_YN, DIRECT_YN, CNVRS_TP_CODE, MOB_ORDER_YN
				, SUM(ORDER_AMT) AS ORDER_AMT, SUM(ORDER_CNT) AS ORDER_CNT
				, CASE WHEN SUM(ORDER_QY)>2000000000 THEN 2000000000 ELSE SUM(ORDER_QY) END AS ORDER_QY
				, SUM(TRGT_ORDER_AMT) AS TRGT_ORDER_AMT, SUM(TRGT_ORDER_CNT) AS TRGT_ORDER_CNT
				, CASE WHEN SUM(TRGT_ORDER_QY)>2000000000 THEN 2000000000 ELSE SUM(TRGT_ORDER_QY) END AS TRGT_ORDER_QY
				, HHSTATS.REG_USER_ID  
			FROM BILLING.MOB_CNVRS_RENEW_HH_STATS AS HHSTATS
			WHERE STATS_DTTM = #{stats_dttm}
			GROUP BY 
				HHSTATS.STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, ADVER_ID, TRK_TP_CODE, ITL_TP_CODE, SESION_SELNG_YN, SESION_SELNG2_YN, DIRECT_YN, CNVRS_TP_CODE, MOB_ORDER_YN
		) AS RESULT		
		ON  DUPLICATE KEY UPDATE 
			MOB_CNVRS_RENEW_ADVER_STATS.ORDER_AMT = RESULT.ORDER_AMT,
			MOB_CNVRS_RENEW_ADVER_STATS.ORDER_CNT = RESULT.ORDER_CNT,
			MOB_CNVRS_RENEW_ADVER_STATS.ORDER_QY  = RESULT.ORDER_QY,
			MOB_CNVRS_RENEW_ADVER_STATS.TRGT_ORDER_AMT = RESULT.TRGT_ORDER_AMT,
			MOB_CNVRS_RENEW_ADVER_STATS.TRGT_ORDER_CNT = RESULT.TRGT_ORDER_CNT,
			MOB_CNVRS_RENEW_ADVER_STATS.TRGT_ORDER_QY = RESULT.TRGT_ORDER_QY
			;
	</update>
	
	<update id="MIGRATION_MOB_CNVRS_RENEW_CTGR_HH_STATS" parameterType="Map">
		DELETE FROM BILLING.MOB_CNVRS_RENEW_CTGR_HH_STATS WHERE STATS_DTTM = #{stats_dttm};
		
		INSERT INTO BILLING.MOB_CNVRS_RENEW_CTGR_HH_STATS (
		STATS_DTTM, STATS_HH, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE,
		CTGR_SEQ, ITL_TP_CODE, TRK_TP_CODE, SESION_SELNG_YN, SESION_SELNG2_YN,
		DIRECT_YN, CNVRS_TP_CODE, MOB_ORDER_YN, ORDER_AMT, ORDER_CNT, ORDER_QY, 
		TRGT_ORDER_AMT, TRGT_ORDER_CNT, TRGT_ORDER_QY, REG_USER_ID, REG_DTTM
		)
		SELECT * FROM (
			SELECT MCRHS.STATS_DTTM, MCRHS.STATS_HH, MCRHS.PLTFOM_TP_CODE, MCRHS.ADVRTS_PRDT_CODE, MCRHS.ADVRTS_TP_CODE, 
			MCUI.CTGR_SEQ, MCRHS.ITL_TP_CODE, MCRHS.TRK_TP_CODE, MCRHS.SESION_SELNG_YN, MCRHS.SESION_SELNG2_YN, 
			MCRHS.DIRECT_YN, MCRHS.CNVRS_TP_CODE, MCRHS.MOB_ORDER_YN,
			 SUM(MCRHS.ORDER_AMT) AS ORDER_AMT, SUM(MCRHS.ORDER_CNT) AS ORDER_CNT, SUM(MCRHS.ORDER_QY) AS ORDER_QY, SUM(MCRHS.TRGT_ORDER_AMT) AS TRGT_ORDER_AMT, SUM(MCRHS.TRGT_ORDER_CNT) AS TRGT_ORDER_CNT,
			  SUM(MCRHS.TRGT_ORDER_QY) AS TRGT_ORDER_QY, MCRHS.REG_USER_ID, MCRHS.REG_DTTM
			  FROM BILLING.MOB_CNVRS_RENEW_HH_STATS MCRHS
			 INNER JOIN  dreamsearch.MOB_CTGR_USER_INFO MCUI ON MCRHS.ADVER_ID = MCUI.USER_ID
			 WHERE  STATS_DTTM  = #{stats_dttm}
			 GROUP BY STATS_DTTM, STATS_HH, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, CTGR_SEQ , ITL_TP_CODE, 
			 TRK_TP_CODE, SESION_SELNG_YN, SESION_SELNG2_YN, DIRECT_YN, CNVRS_TP_CODE, MOB_ORDER_YN 
		) RESULT
		ON DUPLICATE KEY UPDATE 
		MOB_CNVRS_RENEW_CTGR_HH_STATS.ORDER_AMT = RESULT.ORDER_AMT,
		MOB_CNVRS_RENEW_CTGR_HH_STATS.ORDER_CNT = RESULT.ORDER_CNT,
		MOB_CNVRS_RENEW_CTGR_HH_STATS.ORDER_QY = RESULT.ORDER_QY, 
		MOB_CNVRS_RENEW_CTGR_HH_STATS.TRGT_ORDER_AMT = RESULT.TRGT_ORDER_AMT, 
		MOB_CNVRS_RENEW_CTGR_HH_STATS.TRGT_ORDER_CNT = RESULT.TRGT_ORDER_CNT,
		MOB_CNVRS_RENEW_CTGR_HH_STATS.TRGT_ORDER_QY = RESULT.TRGT_ORDER_QY,  
		MOB_CNVRS_RENEW_CTGR_HH_STATS.REG_USER_ID = RESULT.REG_USER_ID, 
		MOB_CNVRS_RENEW_CTGR_HH_STATS.REG_DTTM = RESULT.REG_DTTM, 
		MOB_CNVRS_RENEW_CTGR_HH_STATS.ALT_USER_ID = 'BATCH',
		MOB_CNVRS_RENEW_CTGR_HH_STATS.ALT_DTTM = NOW();	
			
	</update>
	
	<update id="MIGRATION_MOB_CNVRS_RENEW_CTGR_STATS" parameterType="Map">
		DELETE FROM BILLING.MOB_CNVRS_RENEW_CTGR_STATS WHERE STATS_DTTM = #{stats_dttm};
		
		
		INSERT INTO BILLING.MOB_CNVRS_RENEW_CTGR_STATS (
		STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, CTGR_SEQ, TRK_TP_CODE, ITL_TP_CODE, SESION_SELNG_YN, SESION_SELNG2_YN, DIRECT_YN, CNVRS_TP_CODE, MOB_ORDER_YN
			, ORDER_AMT, ORDER_CNT, ORDER_QY, TRGT_ORDER_AMT, TRGT_ORDER_CNT, TRGT_ORDER_QY, REG_USER_ID, REG_DTTM
		)
		SELECT * FROM (
			SELECT MCRSHS.STATS_DTTM, MCRSHS.PLTFOM_TP_CODE, MCRSHS.ADVRTS_PRDT_CODE, MCRSHS.ADVRTS_TP_CODE, MCRSHS.CTGR_SEQ, MCRSHS.TRK_TP_CODE, MCRSHS.ITL_TP_CODE
			, MCRSHS.SESION_SELNG_YN, MCRSHS.SESION_SELNG2_YN, MCRSHS.DIRECT_YN, MCRSHS.CNVRS_TP_CODE, MCRSHS.MOB_ORDER_YN
			, SUM(MCRSHS.ORDER_AMT) AS ORDER_AMT , SUM(MCRSHS.ORDER_CNT) AS ORDER_CNT, SUM(MCRSHS.ORDER_QY) AS ORDER_QY, SUM(MCRSHS.TRGT_ORDER_AMT) AS TRGT_ORDER_AMT, SUM(MCRSHS.TRGT_ORDER_CNT) AS TRGT_ORDER_CNT, SUM(MCRSHS.TRGT_ORDER_QY) AS TRGT_ORDER_QY
			, MCRSHS.REG_USER_ID, MCRSHS.REG_DTTM  
			FROM BILLING.MOB_CNVRS_RENEW_CTGR_HH_STATS AS MCRSHS
			WHERE STATS_DTTM = #{stats_dttm}
			GROUP BY STATS_DTTM , PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, TRK_TP_CODE, CTGR_SEQ, ITL_TP_CODE, SESION_SELNG_YN, SESION_SELNG2_YN, DIRECT_YN, CNVRS_TP_CODE, MOB_ORDER_YN
		) RESULT
		ON DUPLICATE KEY UPDATE 
		MOB_CNVRS_RENEW_CTGR_STATS.ORDER_AMT = RESULT.ORDER_AMT,
		MOB_CNVRS_RENEW_CTGR_STATS.ORDER_CNT = RESULT.ORDER_CNT,
		MOB_CNVRS_RENEW_CTGR_STATS.ORDER_QY = RESULT.ORDER_QY, 
		MOB_CNVRS_RENEW_CTGR_STATS.TRGT_ORDER_AMT = RESULT.TRGT_ORDER_AMT, 
		MOB_CNVRS_RENEW_CTGR_STATS.TRGT_ORDER_CNT = RESULT.TRGT_ORDER_CNT,
		MOB_CNVRS_RENEW_CTGR_STATS.TRGT_ORDER_QY = RESULT.TRGT_ORDER_QY,  
		MOB_CNVRS_RENEW_CTGR_STATS.REG_USER_ID = RESULT.REG_USER_ID, 
		MOB_CNVRS_RENEW_CTGR_STATS.REG_DTTM = RESULT.REG_DTTM, 
		MOB_CNVRS_RENEW_CTGR_STATS.ALT_USER_ID = 'BATCH',
		MOB_CNVRS_RENEW_CTGR_STATS.ALT_DTTM = NOW();
	</update>

	<update id="MIGRATION_MOB_CNVRS_RENEW_MTH_STATS" parameterType="Map">
		DELETE FROM BILLING.MOB_CNVRS_RENEW_MTH_STATS WHERE STATS_MTH = #{stats_mth};


		INSERT INTO BILLING.MOB_CNVRS_RENEW_MTH_STATS (
			STATS_MTH, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, SITE_CODE, PAR_NO,
			MEDIA_TP_CODE, TRK_TP_CODE, ITL_TP_CODE, SESION_SELNG_YN, SESION_SELNG2_YN, DIRECT_YN, CNVRS_TP_CODE, MOB_ORDER_YN,
			ORDER_AMT, ORDER_CNT, ORDER_QY, TRGT_ORDER_AMT, TRGT_ORDER_CNT, TRGT_ORDER_QY, REG_USER_ID
		)
		SELECT STATS_MTH , PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, SITE_CODE, PAR_NO,
			MEDIA_TP_CODE, TRK_TP_CODE, ITL_TP_CODE, SESION_SELNG_YN, SESION_SELNG2_YN, DIRECT_YN, CNVRS_TP_CODE, MOB_ORDER_YN,
			ORDER_AMT, ORDER_CNT, ORDER_QY, TRGT_ORDER_AMT, TRGT_ORDER_CNT, TRGT_ORDER_QY, REG_USER_ID
		FROM (
			SELECT
				LEFT(STATS_DTTM,6) AS STATS_MTH , PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, S.SITE_CODE, PAR_NO,
				MEDIA_TP_CODE, TRK_TP_CODE, ITL_TP_CODE, SESION_SELNG_YN, SESION_SELNG2_YN, DIRECT_YN, CNVRS_TP_CODE, MOB_ORDER_YN,
			  	SUM(ORDER_AMT     ) AS ORDER_AMT,
			  	SUM(ORDER_CNT     ) AS ORDER_CNT,
				IF(SUM(ORDER_QY) > 2000000000 , 2000000000 , SUM(ORDER_QY))  AS ORDER_QY,
				SUM(TRGT_ORDER_AMT) AS TRGT_ORDER_AMT,
				SUM(TRGT_ORDER_CNT) AS TRGT_ORDER_CNT,
				IF(SUM(TRGT_ORDER_QY) > 2000000000 , 2000000000 , SUM(TRGT_ORDER_QY)) AS TRGT_ORDER_QY,
				REG_USER_ID
			FROM BILLING.MOB_CNVRS_RENEW_STATS S
			WHERE STATS_DTTM BETWEEN #{first_date} AND #{last_date}
			GROUP BY
				LEFT(STATS_DTTM,6), PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, SITE_CODE, PAR_NO,
				TRK_TP_CODE, ITL_TP_CODE, SESION_SELNG_YN, SESION_SELNG2_YN, DIRECT_YN, CNVRS_TP_CODE, MOB_ORDER_YN
		) RESULT
		ON  DUPLICATE KEY UPDATE
		MOB_CNVRS_RENEW_MTH_STATS.ORDER_AMT = RESULT.ORDER_AMT,
		MOB_CNVRS_RENEW_MTH_STATS.ORDER_CNT = RESULT.ORDER_CNT,
		MOB_CNVRS_RENEW_MTH_STATS.ORDER_QY  = RESULT.ORDER_QY,
		MOB_CNVRS_RENEW_MTH_STATS.TRGT_ORDER_AMT = RESULT.TRGT_ORDER_AMT,
		MOB_CNVRS_RENEW_MTH_STATS.TRGT_ORDER_CNT = RESULT.TRGT_ORDER_CNT,
		MOB_CNVRS_RENEW_MTH_STATS.TRGT_ORDER_QY = RESULT.TRGT_ORDER_QY
		;
	</update>

	<update id="MIGRATION_MOB_CNVRS_RENEW_CTGR_MTH_STATS" parameterType="Map">
		DELETE FROM BILLING.MOB_CNVRS_RENEW_CTGR_MTH_STATS WHERE STATS_MTH = #{stats_mth};

		INSERT INTO BILLING.MOB_CNVRS_RENEW_CTGR_MTH_STATS (
			STATS_MTH, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, CTGR_SEQ, TRK_TP_CODE, ITL_TP_CODE, SESION_SELNG_YN, SESION_SELNG2_YN, DIRECT_YN, CNVRS_TP_CODE, MOB_ORDER_YN,
			ORDER_AMT, ORDER_CNT, ORDER_QY, TRGT_ORDER_AMT, TRGT_ORDER_CNT, TRGT_ORDER_QY, REG_USER_ID, REG_DTTM
		)
		SELECT * FROM (
			SELECT
				DATE_FORMAT(MCRSHS.STATS_DTTM, '%Y%m') AS STATS_MTH, MCRSHS.PLTFOM_TP_CODE, MCRSHS.ADVRTS_PRDT_CODE, MCRSHS.ADVRTS_TP_CODE, MCRSHS.CTGR_SEQ, MCRSHS.TRK_TP_CODE, MCRSHS.ITL_TP_CODE,
				MCRSHS.SESION_SELNG_YN, MCRSHS.SESION_SELNG2_YN, MCRSHS.DIRECT_YN, MCRSHS.CNVRS_TP_CODE, MCRSHS.MOB_ORDER_YN,
				SUM(MCRSHS.ORDER_AMT) AS ORDER_AMT , SUM(MCRSHS.ORDER_CNT) AS ORDER_CNT, SUM(MCRSHS.ORDER_QY) AS ORDER_QY, SUM(MCRSHS.TRGT_ORDER_AMT) AS TRGT_ORDER_AMT, SUM(MCRSHS.TRGT_ORDER_CNT) AS TRGT_ORDER_CNT, SUM(MCRSHS.TRGT_ORDER_QY) AS TRGT_ORDER_QY,
				MCRSHS.REG_USER_ID, MCRSHS.REG_DTTM
			FROM BILLING.MOB_CNVRS_RENEW_CTGR_STATS AS MCRSHS
			WHERE DATE_FORMAT(MCRSHS.STATS_DTTM, '%Y%m') = DATE_FORMAT(#{first_date}, '%Y%m')
			GROUP BY DATE_FORMAT(STATS_DTTM, '%Y%m') , PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, TRK_TP_CODE, CTGR_SEQ, ITL_TP_CODE, SESION_SELNG_YN, SESION_SELNG2_YN, DIRECT_YN, CNVRS_TP_CODE, MOB_ORDER_YN
		) RESULT
		ON DUPLICATE KEY UPDATE
		MOB_CNVRS_RENEW_CTGR_MTH_STATS.ORDER_AMT = RESULT.ORDER_AMT,
		MOB_CNVRS_RENEW_CTGR_MTH_STATS.ORDER_CNT = RESULT.ORDER_CNT,
		MOB_CNVRS_RENEW_CTGR_MTH_STATS.ORDER_QY = RESULT.ORDER_QY,
		MOB_CNVRS_RENEW_CTGR_MTH_STATS.TRGT_ORDER_AMT = RESULT.TRGT_ORDER_AMT,
		MOB_CNVRS_RENEW_CTGR_MTH_STATS.TRGT_ORDER_CNT = RESULT.TRGT_ORDER_CNT,
		MOB_CNVRS_RENEW_CTGR_MTH_STATS.TRGT_ORDER_QY = RESULT.TRGT_ORDER_QY,
		MOB_CNVRS_RENEW_CTGR_MTH_STATS.REG_USER_ID = RESULT.REG_USER_ID,
		MOB_CNVRS_RENEW_CTGR_MTH_STATS.REG_DTTM = RESULT.REG_DTTM,
		MOB_CNVRS_RENEW_CTGR_MTH_STATS.ALT_USER_ID = 'BATCH',
		MOB_CNVRS_RENEW_CTGR_MTH_STATS.ALT_DTTM = NOW()
		;
	</update>
	<update id="MIGRATION_MOB_CNVRS_STATS"  parameterType="Map">
		DELETE FROM BILLING.MOB_CNVRS_STATS WHERE STATS_DTTM = #{stats_dttm};

		INSERT INTO BILLING.MOB_CNVRS_STATS
		(
		STATS_DTTM,PLTFOM_TP_CODE,ADVRTS_PRDT_CODE,ADVRTS_TP_CODE,SITE_CODE,ADVER_ID,MEDIA_SCRIPT_NO,ITL_TP_CODE,SESION_SELNG_YN,DIRECT_YN,CLICK_TP,CNVRS_TP_CODE,MOB_ORDER_YN
		,ORDER_AMT,ORDER_CNT,ORDER_QY,TRGT_ORDER_AMT,TRGT_ORDER_CNT,TRGT_ORDER_QY
		,REG_USER_ID,REG_DTTM,ALT_USER_ID,ALT_DTTM
		)
		SELECT * FROM (
		SELECT
		STATS_DTTM,PLTFOM_TP_CODE,ADVRTS_PRDT_CODE,ADVRTS_TP_CODE,SITE_CODE,ADVER_ID,MEDIA_SCRIPT_NO,ITL_TP_CODE,SESION_SELNG_YN,DIRECT_YN,CLICK_TP,CNVRS_TP_CODE,MOB_ORDER_YN
		,SUM(ORDER_AMT     ) AS ORDER_AMT
		,SUM(ORDER_CNT     ) AS ORDER_CNT
		,SUM(ORDER_QY      ) AS ORDER_QY
		,SUM(TRGT_ORDER_AMT) AS TRGT_ORDER_AMT
		,SUM(TRGT_ORDER_CNT) AS TRGT_ORDER_CNT
		,SUM(TRGT_ORDER_QY ) AS TRGT_ORDER_QY
		,REG_USER_ID
		,REG_DTTM
		,'BATCH' AS ALT_USER_ID
		,NOW() AS ALT_DTTM
		FROM BILLING.MOB_CNVRS_HH_STATS a
		WHERE STATS_DTTM = #{stats_dttm}
		GROUP BY STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, SITE_CODE, MEDIA_SCRIPT_NO
		, ITL_TP_CODE, SESION_SELNG_YN, DIRECT_YN, CLICK_TP, CNVRS_TP_CODE, MOB_ORDER_YN
		) S
		ON DUPLICATE KEY UPDATE
		MOB_CNVRS_STATS.ORDER_AMT	=	S.ORDER_AMT
		,	MOB_CNVRS_STATS.ORDER_CNT	=	S.ORDER_CNT
		,	MOB_CNVRS_STATS.ORDER_QY	=	S.ORDER_QY
		,	MOB_CNVRS_STATS.TRGT_ORDER_AMT	=	S.TRGT_ORDER_AMT
		,	MOB_CNVRS_STATS.TRGT_ORDER_CNT	=	S.TRGT_ORDER_CNT
		,	MOB_CNVRS_STATS.TRGT_ORDER_QY	=	S.TRGT_ORDER_QY
		,	ALT_USER_ID='BATCH', ALT_DTTM=NOW()
		;
	</update>
	<update id="MIGRATION_MOB_CNVRS_KPI_STATS"  parameterType="Map">
		DELETE FROM BILLING.MOB_CNVRS_KPI_STATS WHERE STATS_DTTM = #{stats_dttm};

		INSERT INTO BILLING.MOB_CNVRS_KPI_STATS(
		STATS_DTTM,PLTFOM_TP_CODE,ADVRTS_PRDT_CODE,ADVRTS_TP_CODE,KPI_NO,ADVER_ID,MEDIA_SCRIPT_NO,ITL_TP_CODE,SESION_SELNG_YN,DIRECT_YN,CLICK_TP,CNVRS_TP_CODE,MOB_ORDER_YN
		,ORDER_AMT,ORDER_CNT,ORDER_QY,TRGT_ORDER_AMT,TRGT_ORDER_CNT,TRGT_ORDER_QY
		,REG_USER_ID,REG_DTTM,ALT_USER_ID,ALT_DTTM
		)
		SELECT * FROM (
		SELECT
		STATS_DTTM,PLTFOM_TP_CODE,ADVRTS_PRDT_CODE,ADVRTS_TP_CODE,KPI_NO,ADVER_ID,MEDIA_SCRIPT_NO,ITL_TP_CODE,SESION_SELNG_YN,DIRECT_YN,CLICK_TP,CNVRS_TP_CODE,MOB_ORDER_YN
		,SUM(ORDER_AMT     ) AS ORDER_AMT
		,SUM(ORDER_CNT     ) AS ORDER_CNT
		,SUM(ORDER_QY      ) AS ORDER_QY
		,SUM(TRGT_ORDER_AMT) AS TRGT_ORDER_AMT
		,SUM(TRGT_ORDER_CNT) AS TRGT_ORDER_CNT
		,SUM(TRGT_ORDER_QY ) AS TRGT_ORDER_QY
		,REG_USER_ID
		,REG_DTTM
		,'BATCH' AS ALT_USER_ID
		,NOW() AS ALT_DTTM
		FROM BILLING.MOB_CNVRS_STATS S, (SELECT SITE_CODE, KPI_NO FROM dreamsearch.adsite UNION ALL SELECT SITE_CODE, KPI_NO FROM dreamsearch.iadsite) A
		WHERE STATS_DTTM=#{stats_dttm}
		AND CONVERT(S.SITE_CODE USING EUCKR)=A.SITE_CODE
		GROUP BY
		STATS_DTTM,PLTFOM_TP_CODE,ADVRTS_PRDT_CODE,ADVRTS_TP_CODE,KPI_NO,ADVER_ID,MEDIA_SCRIPT_NO,ITL_TP_CODE,SESION_SELNG_YN,DIRECT_YN,CLICK_TP,CNVRS_TP_CODE,MOB_ORDER_YN
		) S
		ON DUPLICATE KEY UPDATE
		MOB_CNVRS_KPI_STATS.ORDER_AMT	=	S.ORDER_AMT
		,	MOB_CNVRS_KPI_STATS.ORDER_CNT	=	S.ORDER_CNT
		,	MOB_CNVRS_KPI_STATS.ORDER_QY	=	S.ORDER_QY
		,	MOB_CNVRS_KPI_STATS.TRGT_ORDER_AMT	=	S.TRGT_ORDER_AMT
		,	MOB_CNVRS_KPI_STATS.TRGT_ORDER_CNT	=	S.TRGT_ORDER_CNT
		,	MOB_CNVRS_KPI_STATS.TRGT_ORDER_QY	=	S.TRGT_ORDER_QY
		,	ALT_USER_ID='BATCH', ALT_DTTM=NOW()
		;
	</update>
	<update id="MIGRATION_MOB_CNVRS_ADVER_MEDIA_STATS"  parameterType="Map">
		DELETE FROM BILLING.MOB_CNVRS_ADVER_MEDIA_STATS WHERE STATS_DTTM = #{stats_dttm};

		INSERT INTO BILLING.MOB_CNVRS_ADVER_MEDIA_STATS
		(STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, CLICK_TP, SESION_SELNG_YN, DIRECT_YN, MOB_ORDER_YN, CNVRS_TP_CODE
		, MEDIA_SCRIPT_NO, SITE_CODE, MEDIA_ID, ADVER_ID
		, ORDER_AMT, ORDER_CNT, ORDER_QY, TRGT_ORDER_AMT, TRGT_ORDER_CNT, TRGT_ORDER_QY
		, REG_USER_ID, REG_DTTM
		, ALT_USER_ID, ALT_DTTM
		)
		SELECT * FROM (
		SELECT
		STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, CLICK_TP, SESION_SELNG_YN, DIRECT_YN, MOB_ORDER_YN, CNVRS_TP_CODE
		, MEDIA_SCRIPT_NO, s.SITE_CODE, m.userid MEDIA_ID, IFNULL(u.userid,'') ADVER_ID
		, SUM(ORDER_AMT )  AS ORDER_AMT, SUM(ORDER_CNT )  AS ORDER_CNT
		, CASE WHEN SUM(ORDER_QY )>2000000000 THEN 2000000000 ELSE SUM(ORDER_QY ) END   AS ORDER_QY
		, SUM(TRGT_ORDER_AMT) AS TRGT_ORDER_AMT, SUM(TRGT_ORDER_CNT) AS TRGT_ORDER_CNT
		, CASE WHEN SUM(TRGT_ORDER_QY )>2000000000 THEN 2000000000 ELSE SUM(TRGT_ORDER_QY ) END AS TRGT_ORDER_QY
		, REG_USER_ID, REG_DTTM, 'BATCH' AS ALT_USER_ID, NOW() AS ALT_DTTM
		FROM BILLING.MOB_CNVRS_DTL_STATS s LEFT JOIN dreamsearch.media_script m
		ON s.MEDIA_SCRIPT_NO=m.NO LEFT JOIN ( SELECT TRIM(userid)userid, site_code FROM dreamsearch.adsite UNION SELECT TRIM(userid)userid, site_code FROM dreamsearch.iadsite WHERE userid NOT IN ('werping') ) u
		ON CONVERT(s.SITE_CODE USING euckr) =u.SITE_CODE
		WHERE STATS_DTTM = #{stats_dttm}
		GROUP BY STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, CLICK_TP, SESION_SELNG_YN, DIRECT_YN, MOB_ORDER_YN, CNVRS_TP_CODE
		, MEDIA_SCRIPT_NO, s.SITE_CODE
		) S
		ON DUPLICATE KEY UPDATE
		MOB_CNVRS_ADVER_MEDIA_STATS.ORDER_AMT = S.ORDER_AMT
		, MOB_CNVRS_ADVER_MEDIA_STATS.ORDER_CNT = S.ORDER_CNT
		, MOB_CNVRS_ADVER_MEDIA_STATS.ORDER_QY = S.ORDER_QY
		, MOB_CNVRS_ADVER_MEDIA_STATS.TRGT_ORDER_AMT = S.TRGT_ORDER_AMT
		, MOB_CNVRS_ADVER_MEDIA_STATS.TRGT_ORDER_CNT = S.TRGT_ORDER_CNT
		, MOB_CNVRS_ADVER_MEDIA_STATS.TRGT_ORDER_QY = S.TRGT_ORDER_QY
		, MOB_CNVRS_ADVER_MEDIA_STATS.ALT_USER_ID = 'BATCH'
		, MOB_CNVRS_ADVER_MEDIA_STATS.ALT_DTTM = NOW();

	</update>
	<update id="MIGRATION_MOB_CNVRS_MEDIA_STATS"  parameterType="Map">
		DELETE FROM BILLING.MOB_CNVRS_MEDIA_STATS WHERE STATS_DTTM = #{stats_dttm};

		INSERT INTO BILLING.MOB_CNVRS_MEDIA_STATS
		(STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, CLICK_TP, SESION_SELNG_YN, DIRECT_YN, MOB_ORDER_YN, CNVRS_TP_CODE
		, MEDIA_SCRIPT_NO, MEDIA_ID
		, ORDER_AMT, ORDER_CNT, ORDER_QY, TRGT_ORDER_AMT, TRGT_ORDER_CNT, TRGT_ORDER_QY
		, REG_USER_ID, REG_DTTM
		, ALT_USER_ID, ALT_DTTM
		)
		SELECT * FROM (
		SELECT
		STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, CLICK_TP, SESION_SELNG_YN, DIRECT_YN, MOB_ORDER_YN, CNVRS_TP_CODE, MEDIA_SCRIPT_NO
		, m.userid MEDIA_ID
		, SUM(ORDER_AMT )  AS ORDER_AMT, SUM(ORDER_CNT )  AS ORDER_CNT
		, CASE WHEN SUM(ORDER_QY )>2000000000 THEN 2000000000 ELSE SUM(ORDER_QY ) END   AS ORDER_QY
		, SUM(TRGT_ORDER_AMT) AS TRGT_ORDER_AMT, SUM(TRGT_ORDER_CNT) AS TRGT_ORDER_CNT
		, CASE WHEN SUM(TRGT_ORDER_QY )>2000000000 THEN 2000000000 ELSE SUM(TRGT_ORDER_QY ) END AS TRGT_ORDER_QY
		, REG_USER_ID, REG_DTTM, 'BATCH' AS ALT_USER_ID, NOW() AS ALT_DTTM
		FROM BILLING.MOB_CNVRS_DTL_STATS s LEFT JOIN dreamsearch.media_script m ON s.MEDIA_SCRIPT_NO=m.NO
		WHERE STATS_DTTM = #{stats_dttm}
		GROUP BY STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, CLICK_TP, SESION_SELNG_YN, DIRECT_YN, MOB_ORDER_YN, CNVRS_TP_CODE, MEDIA_SCRIPT_NO
		) S
		ON DUPLICATE KEY UPDATE MOB_CNVRS_MEDIA_STATS.ORDER_AMT = S.ORDER_AMT
		, MOB_CNVRS_MEDIA_STATS.ORDER_CNT = S.ORDER_CNT
		, MOB_CNVRS_MEDIA_STATS.ORDER_QY = S.ORDER_QY
		, MOB_CNVRS_MEDIA_STATS.TRGT_ORDER_AMT = S.TRGT_ORDER_AMT
		, MOB_CNVRS_MEDIA_STATS.TRGT_ORDER_CNT = S.TRGT_ORDER_CNT
		, MOB_CNVRS_MEDIA_STATS.TRGT_ORDER_QY = S.TRGT_ORDER_QY
		, MOB_CNVRS_MEDIA_STATS.ALT_USER_ID = 'BATCH'
		, MOB_CNVRS_MEDIA_STATS.ALT_DTTM = NOW();
	</update>
	<update id="MIGRATION_MOB_CNVRS_ADVER_STATS"  parameterType="Map">
		DELETE FROM BILLING.MOB_CNVRS_ADVER_STATS WHERE STATS_DTTM = #{stats_dttm};

		INSERT INTO BILLING.MOB_CNVRS_ADVER_STATS
		(STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, CLICK_TP, SESION_SELNG_YN, DIRECT_YN, MOB_ORDER_YN, CNVRS_TP_CODE
		, SITE_CODE, ADVER_ID
		, ORDER_AMT, ORDER_CNT, ORDER_QY, TRGT_ORDER_AMT, TRGT_ORDER_CNT, TRGT_ORDER_QY
		, REG_USER_ID, REG_DTTM
		, ALT_USER_ID, ALT_DTTM
		)
		SELECT * FROM (
		SELECT
		STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, CLICK_TP, SESION_SELNG_YN, DIRECT_YN, MOB_ORDER_YN, CNVRS_TP_CODE
		, s.SITE_CODE, IFNULL(u.userid,'') ADVER_ID
		, SUM(ORDER_AMT )  AS ORDER_AMT, SUM(ORDER_CNT )  AS ORDER_CNT
		, CASE WHEN SUM(ORDER_QY )>2000000000 THEN 2000000000 ELSE SUM(ORDER_QY ) END   AS ORDER_QY
		, SUM(TRGT_ORDER_AMT) AS TRGT_ORDER_AMT, SUM(TRGT_ORDER_CNT) AS TRGT_ORDER_CNT
		, CASE WHEN SUM(TRGT_ORDER_QY )>2000000000 THEN 2000000000 ELSE SUM(TRGT_ORDER_QY ) END AS TRGT_ORDER_QY
		, REG_USER_ID, REG_DTTM, 'BATCH' AS ALT_USER_ID, NOW() AS ALT_DTTM
		FROM BILLING.MOB_CNVRS_DTL_STATS s LEFT JOIN ( SELECT TRIM(userid)userid, site_code FROM dreamsearch.adsite UNION SELECT TRIM(userid)userid, site_code FROM dreamsearch.iadsite WHERE userid NOT IN ('werping') ) u
		ON CONVERT(s.SITE_CODE USING euckr) =u.SITE_CODE
		WHERE STATS_DTTM = #{stats_dttm}
		GROUP BY STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, CLICK_TP, SESION_SELNG_YN, DIRECT_YN, MOB_ORDER_YN, CNVRS_TP_CODE
		, s.SITE_CODE
		) S
		ON DUPLICATE KEY UPDATE MOB_CNVRS_ADVER_STATS.ORDER_AMT = S.ORDER_AMT
		, MOB_CNVRS_ADVER_STATS.ORDER_CNT = S.ORDER_CNT
		, MOB_CNVRS_ADVER_STATS.ORDER_QY = S.ORDER_QY
		, MOB_CNVRS_ADVER_STATS.TRGT_ORDER_AMT = S.TRGT_ORDER_AMT
		, MOB_CNVRS_ADVER_STATS.TRGT_ORDER_CNT = S.TRGT_ORDER_CNT
		, MOB_CNVRS_ADVER_STATS.TRGT_ORDER_QY = S.TRGT_ORDER_QY
		, MOB_CNVRS_ADVER_STATS.ALT_USER_ID = 'BATCH'
		, MOB_CNVRS_ADVER_STATS.ALT_DTTM = NOW();
	</update>
	<update id="MIGRATION_MOB_CNVRS_COM_STATS"  parameterType="Map">
		DELETE FROM BILLING.MOB_CNVRS_COM_STATS WHERE STATS_DTTM = #{stats_dttm};

		INSERT INTO BILLING.MOB_CNVRS_COM_STATS
		(STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, CLICK_TP, SESION_SELNG_YN, DIRECT_YN, MOB_ORDER_YN, CNVRS_TP_CODE
		, ORDER_AMT, ORDER_CNT, ORDER_QY, TRGT_ORDER_AMT, TRGT_ORDER_CNT, TRGT_ORDER_QY
		, REG_USER_ID, REG_DTTM
		, ALT_USER_ID, ALT_DTTM
		)
		SELECT * FROM (
		SELECT
		STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, CLICK_TP, SESION_SELNG_YN, DIRECT_YN, MOB_ORDER_YN, CNVRS_TP_CODE
		, SUM(ORDER_AMT )  AS ORDER_AMT, SUM(ORDER_CNT )  AS ORDER_CNT
		, CASE WHEN SUM(ORDER_QY )>2000000000 THEN 2000000000 ELSE SUM(ORDER_QY ) END   AS ORDER_QY
		, SUM(TRGT_ORDER_AMT) AS TRGT_ORDER_AMT, SUM(TRGT_ORDER_CNT) AS TRGT_ORDER_CNT
		, CASE WHEN SUM(TRGT_ORDER_QY )>2000000000 THEN 2000000000 ELSE SUM(TRGT_ORDER_QY ) END AS TRGT_ORDER_QY
		, REG_USER_ID, REG_DTTM, 'BATCH' AS ALT_USER_ID, NOW() AS ALT_DTTM
		FROM BILLING.MOB_CNVRS_DTL_STATS s
		WHERE STATS_DTTM = #{stats_dttm}
		GROUP BY STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, CLICK_TP, SESION_SELNG_YN, DIRECT_YN, MOB_ORDER_YN, CNVRS_TP_CODE
		) S
		ON DUPLICATE KEY UPDATE MOB_CNVRS_COM_STATS.ORDER_AMT = S.ORDER_AMT
		, MOB_CNVRS_COM_STATS.ORDER_CNT = S.ORDER_CNT
		, MOB_CNVRS_COM_STATS.ORDER_QY = S.ORDER_QY
		, MOB_CNVRS_COM_STATS.TRGT_ORDER_AMT = S.TRGT_ORDER_AMT
		, MOB_CNVRS_COM_STATS.TRGT_ORDER_CNT = S.TRGT_ORDER_CNT
		, MOB_CNVRS_COM_STATS.TRGT_ORDER_QY = S.TRGT_ORDER_QY
		, MOB_CNVRS_COM_STATS.ALT_USER_ID = 'BATCH'
		, MOB_CNVRS_COM_STATS.ALT_DTTM = NOW();
	</update>
	<update id="MIGRATION_MOB_CNVRS_INTG_STATS"  parameterType="Map">
		DELETE FROM BILLING.MOB_CNVRS_INTG_STATS WHERE STATS_DTTM = #{stats_dttm};

		INSERT INTO BILLING.MOB_CNVRS_INTG_STATS
		(STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, CLICK_TP, SESION_SELNG_YN, DIRECT_YN, MOB_ORDER_YN, CNVRS_TP_CODE
		, INTG_TP_CODE, INTG_SEQ
		, ORDER_AMT, ORDER_CNT, ORDER_QY, TRGT_ORDER_AMT, TRGT_ORDER_CNT, TRGT_ORDER_QY
		, REG_USER_ID, REG_DTTM
		, ALT_USER_ID, ALT_DTTM
		)
		SELECT * FROM (
		SELECT
		STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, CLICK_TP, SESION_SELNG_YN, DIRECT_YN, MOB_ORDER_YN, CNVRS_TP_CODE
		, INTG_TP_CODE, INTG_SEQ
		, SUM(ORDER_AMT )  AS ORDER_AMT, SUM(ORDER_CNT )  AS ORDER_CNT
		, CASE WHEN SUM(ORDER_QY )>2000000000 THEN 2000000000 ELSE SUM(ORDER_QY ) END   AS ORDER_QY
		, SUM(TRGT_ORDER_AMT) AS TRGT_ORDER_AMT, SUM(TRGT_ORDER_CNT) AS TRGT_ORDER_CNT
		, CASE WHEN SUM(TRGT_ORDER_QY )>2000000000 THEN 2000000000 ELSE SUM(TRGT_ORDER_QY ) END AS TRGT_ORDER_QY
		, REG_USER_ID, REG_DTTM, 'BATCH' AS ALT_USER_ID, NOW() AS ALT_DTTM
		FROM BILLING.MOB_CNVRS_DTL_STATS s LEFT JOIN dreamsearch.media_script m
		ON s.MEDIA_SCRIPT_NO=m.NO
		WHERE STATS_DTTM = #{stats_dttm}
		GROUP BY STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, CLICK_TP, SESION_SELNG_YN, DIRECT_YN, MOB_ORDER_YN, CNVRS_TP_CODE
		, INTG_TP_CODE, INTG_SEQ
		) S
		ON DUPLICATE KEY UPDATE MOB_CNVRS_INTG_STATS.ORDER_AMT = S.ORDER_AMT
		, MOB_CNVRS_INTG_STATS.ORDER_CNT = S.ORDER_CNT
		, MOB_CNVRS_INTG_STATS.ORDER_QY = S.ORDER_QY
		, MOB_CNVRS_INTG_STATS.TRGT_ORDER_AMT = S.TRGT_ORDER_AMT
		, MOB_CNVRS_INTG_STATS.TRGT_ORDER_CNT = S.TRGT_ORDER_CNT
		, MOB_CNVRS_INTG_STATS.TRGT_ORDER_QY = S.TRGT_ORDER_QY
		, MOB_CNVRS_INTG_STATS.ALT_USER_ID = 'BATCH'
		, MOB_CNVRS_INTG_STATS.ALT_DTTM = NOW();

	</update>
	<update id="MIGRATION_MOB_CNVRS_RENEW_STATS" parameterType="Map">
		DELETE FROM BILLING.MOB_CNVRS_RENEW_STATS WHERE STATS_DTTM = #{stats_dttm};


		INSERT INTO BILLING.MOB_CNVRS_RENEW_STATS (
		STATS_DTTM , PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, SITE_CODE, ADVER_ID, PAR_NO, MEDIA_ID,
		MEDIA_TP_CODE, TRK_TP_CODE, ITL_TP_CODE, SESION_SELNG_YN, SESION_SELNG2_YN, DIRECT_YN, CNVRS_TP_CODE, MOB_ORDER_YN,
		ORDER_AMT, ORDER_CNT, ORDER_QY, TRGT_ORDER_AMT, TRGT_ORDER_CNT, TRGT_ORDER_QY, REG_USER_ID
		)
		SELECT * FROM (
		SELECT
		HHSTATS.STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, SITE_CODE, ADVER_ID, PAR_NO, MEDIA_ID, MEDIA_TP_CODE, TRK_TP_CODE, ITL_TP_CODE, SESION_SELNG_YN, SESION_SELNG2_YN, DIRECT_YN, CNVRS_TP_CODE, MOB_ORDER_YN
		, SUM(ORDER_AMT) AS ORDER_AMT, SUM(ORDER_CNT) AS ORDER_CNT
		, CASE WHEN SUM(ORDER_QY)>2000000000 THEN 2000000000 ELSE SUM(ORDER_QY) END AS ORDER_QY
		, SUM(TRGT_ORDER_AMT) AS TRGT_ORDER_AMT, SUM(TRGT_ORDER_CNT) AS TRGT_ORDER_CNT
		, CASE WHEN SUM(TRGT_ORDER_QY)>2000000000 THEN 2000000000 ELSE SUM(TRGT_ORDER_QY) END AS TRGT_ORDER_QY
		, HHSTATS.REG_USER_ID
		FROM BILLING.MOB_CNVRS_RENEW_HH_STATS AS HHSTATS
		WHERE STATS_DTTM = #{stats_dttm}
		GROUP BY
		HHSTATS.STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, SITE_CODE, ADVER_ID, PAR_NO, MEDIA_ID, ITL_TP_CODE, TRK_TP_CODE, SESION_SELNG_YN, SESION_SELNG2_YN, DIRECT_YN, CNVRS_TP_CODE, MOB_ORDER_YN
		) AS RESULT
		ON  DUPLICATE KEY UPDATE
		MOB_CNVRS_RENEW_STATS.ORDER_AMT = RESULT.ORDER_AMT,
		MOB_CNVRS_RENEW_STATS.ORDER_CNT = RESULT.ORDER_CNT,
		MOB_CNVRS_RENEW_STATS.ORDER_QY  = RESULT.ORDER_QY,
		MOB_CNVRS_RENEW_STATS.TRGT_ORDER_AMT = RESULT.TRGT_ORDER_AMT,
		MOB_CNVRS_RENEW_STATS.TRGT_ORDER_CNT = RESULT.TRGT_ORDER_CNT,
		MOB_CNVRS_RENEW_STATS.TRGT_ORDER_QY = RESULT.TRGT_ORDER_QY
		;
	</update>
</mapper>