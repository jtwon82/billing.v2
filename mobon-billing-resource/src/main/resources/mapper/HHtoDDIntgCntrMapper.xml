<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hHtoDDIntgCntrMapper">


	<!-- 변경일자 체크 조회 -->
	<select id="sql_select_mod_date_dd" resultType="Map">
		/* MOB_CAMP_PAR_GATR_STATS : NEW GATR_DTTM */
		SELECT DISTINCT STATS_DTTM 
		  FROM (
				SELECT
					DISTINCT STATS_DTTM
				FROM BILLING.MOB_CAMP_PAR_GATR_STATS A
				WHERE GATR_DTTM = DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -1 DAY),'%Y%m%d')
					AND DATE_FORMAT(NOW(),'%H') IN ('00','01','02','03','04','05','06') /* 6시 이전 배치는 변경데이터 분 처리 배치*/
					AND ITL_TP_CODE != '99'
				UNION ALL
				SELECT CASE WHEN DATE_FORMAT(NOW(),'%H') NOT IN ('00','01','02','03','04','05','06')
				            THEN DATE_FORMAT(NOW(),'%Y%m%d')
				            ELSE DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -1 DAY),'%Y%m%d')
				            END 
				UNION ALL
				/* 재작업을 위한 1달 전 날짜 추가 추후 뺄 수 있음 */
				SELECT CASE WHEN DATE_FORMAT(NOW(),'%H') NOT IN ('00','01','02','03','04','05','06')
				            THEN DATE_FORMAT(NOW(),'%Y%m%d')
				            ELSE DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -1 MONTH),'%Y%m%d')
				            END 
		) Z
		ORDER BY STATS_DTTM DESC
	</select>
	
	
	
	<!-- 광고주 통계 공통코드 조회 -->
	<select id="sql_SELECT_COM_CODE" resultType="Map" parameterType="Map">
		/* MOBON_COM_CODE : COMCODE */
		SELECT
			code_id as INTG_TP_CODE, code_val
		FROM dreamsearch.MOBON_COM_CODE
		WHERE CODE_TP_ID = 'INTG_TP_CODE'
		  AND CODE_ID != '11'
		ORDER BY code_id;
	</select>
	
	
	<select id="sql_SELECT_MEDIA_ID_list" resultType="Map" parameterType="Map">
	  SELECT DISTINCT userid MEDIA_ID
    	FROM dreamsearch.media_site
	</select>
	
	
	<!-- 분할 적재를 위한 데이블 건수 조회 -->
	<select id="sql_dd_select_tp_code_count" resultType="Map">
		/* INTG_CNTR_CAMP_PAR_STATS : LIST advrtsTpCode count */
		SELECT
			A.STATS_DTTM, A.INTG_TP_CODE, COUNT(1) AS TP_CODE_COUNT
		FROM BILLING.INTG_CNTR_CAMP_PAR_STATS A
		WHERE A.STATS_DTTM =${STATS_DTTM}
		  AND A.INTG_TP_CODE =#{INTG_TP_CODE}
		  AND A.MEDIA_ID IN (
			<foreach item="I" collection="MEDIA_ID" separator=" , ">
				#{I.MEDIA_ID}
			</foreach>
		)
		GROUP BY A.STATS_DTTM, A.INTG_TP_CODE;
	</select>
	
	<select id="sql_INTG_CNTR_STATS_TEMP_count" resultType="Map">
		/* INTG_CNTR_STATS_TEMP : LIST INTG_CNTR_STATS_TEMP count */
		SELECT COUNT(1) AS LIST_COUNT
		FROM BILLING_TEMP.INTG_CNTR_STATS_TEMP A
	</select>
	
	<select id="sql_INTG_CNTR_PAR_STATS_TEMP_count" resultType="Map">
		/* INTG_CNTR_PAR_STATS_TEMP : LIST INTG_CNTR_PAR_STATS_TEMP count */
		SELECT COUNT(1) AS LIST_COUNT
		FROM BILLING_TEMP.INTG_CNTR_PAR_STATS_TEMP A
	</select>
	
	<select id="sql_INTG_CNTR_MEDIA_STATS_TEMP_count" resultType="Map">
		/* INTG_CNTR_MEDIA_STATS_TEMP : LIST INTG_CNTR_MEDIA_STATS_TEMP count */
		SELECT COUNT(1) AS LIST_COUNT
		FROM BILLING_TEMP.INTG_CNTR_MEDIA_STATS_TEMP A
	</select>
	
	<select id="sql_INTG_CNTR_MEDIA_ADVER_STATS_TEMP_count" resultType="Map">
		/* INTG_CNTR_MEDIA_ADVER_STATS_TEMP : LIST INTG_CNTR_MEDIA_ADVER_STATS_TEMP count */
		SELECT COUNT(1) AS LIST_COUNT
		FROM BILLING_TEMP.INTG_CNTR_MEDIA_ADVER_STATS_TEMP A
	</select>
	
	<select id="sql_INTG_CNTR_CAMP_STATS_TEMP_count" resultType="Map">
		/* INTG_CNTR_CAMP_STATS_TEMP : LIST INTG_CNTR_CAMP_STATS_TEMP count */
		SELECT COUNT(1) AS LIST_COUNT
		FROM BILLING_TEMP.INTG_CNTR_CAMP_STATS_TEMP A
	</select>
	
	<select id="sql_INTG_CNTR_ADVER_STATS_TEMP_count" resultType="Map">
		/* INTG_CNTR_ADVER_STATS_TEMP : LIST INTG_CNTR_ADVER_STATS_TEMP count */
		SELECT COUNT(1) AS LIST_COUNT
		FROM BILLING_TEMP.INTG_CNTR_ADVER_STATS_TEMP A
	</select>
	
	<select id="sql_INTG_CNTR_ADVER_PAR_STATS_TEMP_count" resultType="Map">
		/* INTG_CNTR_ADVER_PAR_STATS_TEMP : LIST INTG_CNTR_ADVER_PAR_STATS_TEMP count */
		SELECT COUNT(1) AS LIST_COUNT
		FROM BILLING_TEMP.INTG_CNTR_ADVER_PAR_STATS_TEMP A
	</select>
	
	
	
	<!-- TEMP TABLE 생성 -->
	<insert id="sql_CREATE_DD_TABLE">
		/* INTG_CNTR_CAMP_PAR_STATS_TEMP : dump tmptable */
		DROP TABLE IF EXISTS BILLING_TEMP.INTG_CNTR_CAMP_PAR_STATS_TEMP;
		CREATE TABLE IF NOT EXISTS BILLING_TEMP.INTG_CNTR_CAMP_PAR_STATS_TEMP 
		(INDEX INTG_CNTR_CAMP_PAR_STATS_TEMP_X01 (`INTG_TP_CODE`, `STATS_DTTM` , `GROUP_FIELD`)) COLLATE='utf8_general_ci'
			SELECT
				INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
				, SITE_CODE, MEDIA_SCRIPT_NO
				, ADVER_ID, MEDIA_ID
				, TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
				, TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT, 1000 AS GROUP_FIELD
				, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
			FROM BILLING.INTG_CNTR_CAMP_PAR_STATS
			LIMIT 0,0;
	</insert>
	<update id="sql_dropDDTempTable">
		DROP TABLE IF EXISTS BILLING_TEMP.INTG_CNTR_CAMP_PAR_STATS_TEMP;
	</update>
	
	<insert id="sql_CREATE_INTG_CNTR_STATS_TABLE">
	/* INTG_CNTR_STATS_TEMP : dump tmptable */
	DROP TABLE IF EXISTS BILLING_TEMP.INTG_CNTR_STATS_TEMP;
	CREATE TABLE IF NOT EXISTS BILLING_TEMP.INTG_CNTR_STATS_TEMP
	(PRIMARY KEY(INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ)) COLLATE='utf8_general_ci'
		SELECT INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
			, TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
			, TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT
			, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM 
	  	  FROM BILLING.INTG_CNTR_STATS
		 LIMIT 0,0;
	</insert>
	<update id="sql_dropINTG_CNTR_STATS_TempTable">
		DROP TABLE IF EXISTS BILLING_TEMP.INTG_CNTR_STATS_TEMP;
	</update>

	<insert id="sql_CREATE_INTG_CNTR_PAR_STATS_TABLE">
	/* INTG_CNTR_PAR_STATS_TEMP : dump tmptable */
	DROP TABLE IF EXISTS BILLING_TEMP.INTG_CNTR_PAR_STATS_TEMP;
	CREATE TABLE IF NOT EXISTS BILLING_TEMP.INTG_CNTR_PAR_STATS_TEMP
	(PRIMARY KEY(INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ, MEDIA_SCRIPT_NO, MEDIA_ID)) COLLATE='utf8_general_ci'
		SELECT INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ, MEDIA_SCRIPT_NO, MEDIA_ID
			, TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
			, TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT
			, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM 
	  	  FROM BILLING.INTG_CNTR_PAR_STATS
		 LIMIT 0,0;
	</insert>
	<update id="sql_dropINTG_CNTR_PAR_STATS_TempTable">
		DROP TABLE IF EXISTS BILLING_TEMP.INTG_CNTR_PAR_STATS_TEMP;
	</update>
	
	<insert id="sql_CREATE_INTG_CNTR_MEDIA_STATS_TABLE">
	/* INTG_CNTR_MEDIA_STATS_TEMP : dump tmptable */
	DROP TABLE IF EXISTS BILLING_TEMP.INTG_CNTR_MEDIA_STATS_TEMP;
	CREATE TABLE IF NOT EXISTS BILLING_TEMP.INTG_CNTR_MEDIA_STATS_TEMP
	(PRIMARY KEY(INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ, MEDIA_ID)) COLLATE='utf8_general_ci'
		SELECT INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ, MEDIA_ID
			, TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
			, TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT
			, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM 
	  	  FROM BILLING.INTG_CNTR_MEDIA_STATS
		 LIMIT 0,0;
	</insert>
	<update id="sql_dropINTG_CNTR_MEDIA_STATS_TempTable">
		DROP TABLE IF EXISTS BILLING_TEMP.INTG_CNTR_MEDIA_STATS_TEMP;
	</update>
	
	<insert id="sql_CREATE_INTG_CNTR_MEDIA_ADVER_STATS_TABLE">
	/* INTG_CNTR_MEDIA_ADVER_STATS_TEMP : dump tmptable */
	DROP TABLE IF EXISTS BILLING_TEMP.INTG_CNTR_MEDIA_ADVER_STATS_TEMP;
	CREATE TABLE IF NOT EXISTS BILLING_TEMP.INTG_CNTR_MEDIA_ADVER_STATS_TEMP
	(PRIMARY KEY(INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ, MEDIA_ID, ADVER_ID)) COLLATE='utf8_general_ci'
		SELECT INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ, MEDIA_ID, ADVER_ID
			, TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
			, TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT
			, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM 
	  	  FROM BILLING.INTG_CNTR_MEDIA_ADVER_STATS
		 LIMIT 0,0;
	</insert>
	<update id="sql_dropINTG_CNTR_MEDIA_ADVER_STATS_TempTable">
		DROP TABLE IF EXISTS BILLING_TEMP.INTG_CNTR_MEDIA_ADVER_STATS_TEMP;
	</update>
	
	<insert id="sql_CREATE_INTG_CNTR_CAMP_STATS_TABLE">
	/* INTG_CNTR_CAMP_STATS_TEMP : dump tmptable */
	DROP TABLE IF EXISTS BILLING_TEMP.INTG_CNTR_CAMP_STATS_TEMP;
	CREATE TABLE IF NOT EXISTS BILLING_TEMP.INTG_CNTR_CAMP_STATS_TEMP
	(PRIMARY KEY(INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ, SITE_CODE, ADVER_ID)) COLLATE='utf8_general_ci'
		SELECT INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ, SITE_CODE, ADVER_ID
			, TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
			, TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT
			, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM 
	  	  FROM BILLING.INTG_CNTR_CAMP_STATS
		 LIMIT 0,0;
	</insert>
	<update id="sql_dropINTG_CNTR_CAMP_STATS_TempTable">
		DROP TABLE IF EXISTS BILLING_TEMP.INTG_CNTR_CAMP_STATS_TEMP;
	</update>
	
	<insert id="sql_CREATE_INTG_CNTR_ADVER_STATS_TABLE">
	/* INTG_CNTR_ADVER_STATS_TEMP : dump tmptable */
	DROP TABLE IF EXISTS BILLING_TEMP.INTG_CNTR_ADVER_STATS_TEMP;
	CREATE TABLE IF NOT EXISTS BILLING_TEMP.INTG_CNTR_ADVER_STATS_TEMP
	(PRIMARY KEY(INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ, ADVER_ID)) COLLATE='utf8_general_ci'
		SELECT INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ, ADVER_ID
			, TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
			, TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT
			, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
	  	  FROM BILLING.INTG_CNTR_ADVER_STATS
		 LIMIT 0,0;
	</insert>
	<update id="sql_dropINTG_CNTR_ADVER_STATS_TempTable">
		DROP TABLE IF EXISTS BILLING_TEMP.INTG_CNTR_ADVER_STATS_TEMP;
	</update>
	
	<insert id="sql_CREATE_INTG_CNTR_ADVER_PAR_STATS_TABLE">
	/* INTG_CNTR_ADVER_PAR_STATS_TEMP : dump tmptable */
	DROP TABLE IF EXISTS BILLING_TEMP.INTG_CNTR_ADVER_PAR_STATS_TEMP;
	CREATE TABLE IF NOT EXISTS BILLING_TEMP.INTG_CNTR_ADVER_PAR_STATS_TEMP
	(PRIMARY KEY(INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ, ADVER_ID, MEDIA_SCRIPT_NO)) COLLATE='utf8_general_ci'
		SELECT INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ, ADVER_ID, MEDIA_SCRIPT_NO
			, TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
			, TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT
			, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM 
	  	  FROM BILLING.INTG_CNTR_ADVER_PAR_STATS
		 LIMIT 0,0;
	</insert>
	<update id="sql_dropINTG_CNTR_ADVER_PAR_STATS_TempTable">
		DROP TABLE IF EXISTS BILLING_TEMP.INTG_CNTR_ADVER_PAR_STATS_TEMP;
	</update>
	
	<insert id="sql_DUMP_INTGCNTR_TEMP" parameterType="Map">
		INSERT INTO BILLING_TEMP.INTG_CNTR_CAMP_PAR_STATS_TEMP
			SELECT
				INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
				, SITE_CODE, MEDIA_SCRIPT_NO
				, ADVER_ID, MEDIA_ID
				, TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
				, TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT , CAST(${START_POINT} / ${END_POINT} AS INT) AS GROUP_FIELD
				, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
			FROM BILLING.INTG_CNTR_CAMP_PAR_STATS A
			WHERE STATS_DTTM =${STATS_DTTM}
				AND INTG_TP_CODE =#{INTG_TP_CODE}
			LIMIT ${START_POINT}, ${END_POINT}
	</insert>
	
	
	
	<!-- TEMP 테이블 데이터 적재 -->
	<update id="sql_DUMP_INTGCNTR_ADVER_PAR_STATS_TEMP" parameterType="Map">
		INSERT INTO BILLING_TEMP.INTG_CNTR_ADVER_PAR_STATS_TEMP(
			INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
			, ADVER_ID, MEDIA_SCRIPT_NO
			, TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
			, TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT
			, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
			)
				SELECT * FROM (
					SELECT
						INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
						, ADVER_ID, MEDIA_SCRIPT_NO
						, SUM(TOT_EPRS_CNT)TOT_EPRS_CNT, SUM(PAR_EPRS_CNT)PAR_EPRS_CNT, SUM(CLICK_CNT)CLICK_CNT, SUM(ADVRTS_AMT)ADVRTS_AMT, SUM(MEDIA_PYMNT_AMT)MEDIA_PYMNT_AMT
						, SUM(TRGT_EPRS_CNT)TRGT_EPRS_CNT, SUM(TRGT_PAR_EPRS_CNT)TRGT_PAR_EPRS_CNT, SUM(TRGT_CLICK_CNT)TRGT_CLICK_CNT, SUM(TRGT_ADVRTS_AMT)TRGT_ADVRTS_AMT
						, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
					FROM BILLING_TEMP.INTG_CNTR_CAMP_PAR_STATS_TEMP
					WHERE STATS_DTTM =${STATS_DTTM}
						AND INTG_TP_CODE = #{INTG_TP_CODE}
						AND GROUP_FIELD = CAST(${START_POINT} / ${END_POINT} AS INT)
					GROUP BY INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
						, ADVER_ID, MEDIA_SCRIPT_NO
					ORDER BY NULL
				) S
		ON DUPLICATE KEY UPDATE
			  INTG_CNTR_ADVER_PAR_STATS_TEMP.TOT_EPRS_CNT		= INTG_CNTR_ADVER_PAR_STATS_TEMP.TOT_EPRS_CNT		+ S.TOT_EPRS_CNT
			, INTG_CNTR_ADVER_PAR_STATS_TEMP.PAR_EPRS_CNT		= INTG_CNTR_ADVER_PAR_STATS_TEMP.PAR_EPRS_CNT		+ S.PAR_EPRS_CNT
			, INTG_CNTR_ADVER_PAR_STATS_TEMP.CLICK_CNT			= INTG_CNTR_ADVER_PAR_STATS_TEMP.CLICK_CNT			+ S.CLICK_CNT
			, INTG_CNTR_ADVER_PAR_STATS_TEMP.ADVRTS_AMT			= INTG_CNTR_ADVER_PAR_STATS_TEMP.ADVRTS_AMT			+ S.ADVRTS_AMT
			, INTG_CNTR_ADVER_PAR_STATS_TEMP.MEDIA_PYMNT_AMT	= INTG_CNTR_ADVER_PAR_STATS_TEMP.MEDIA_PYMNT_AMT		+ S.MEDIA_PYMNT_AMT
			, INTG_CNTR_ADVER_PAR_STATS_TEMP.TRGT_EPRS_CNT		= INTG_CNTR_ADVER_PAR_STATS_TEMP.TRGT_EPRS_CNT		+ S.TRGT_EPRS_CNT
			, INTG_CNTR_ADVER_PAR_STATS_TEMP.TRGT_PAR_EPRS_CNT	= INTG_CNTR_ADVER_PAR_STATS_TEMP.TRGT_PAR_EPRS_CNT	+ S.TRGT_PAR_EPRS_CNT
			, INTG_CNTR_ADVER_PAR_STATS_TEMP.TRGT_CLICK_CNT		= INTG_CNTR_ADVER_PAR_STATS_TEMP.TRGT_CLICK_CNT		+ S.TRGT_CLICK_CNT
			, INTG_CNTR_ADVER_PAR_STATS_TEMP.TRGT_ADVRTS_AMT	= INTG_CNTR_ADVER_PAR_STATS_TEMP.TRGT_ADVRTS_AMT		+ S.TRGT_ADVRTS_AMT
			, INTG_CNTR_ADVER_PAR_STATS_TEMP.ALT_USER_ID		='BATCH'
			, INTG_CNTR_ADVER_PAR_STATS_TEMP.ALT_DTTM			= NOW();
	</update>
	
	<update id="sql_DUMP_INTGCNTR_ADVER_STATS_TEMP" parameterType="Map">
		INSERT INTO BILLING_TEMP.INTG_CNTR_ADVER_STATS_TEMP(
			INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
			, ADVER_ID
			, TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
			, TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT
			, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
			)
				SELECT * FROM (
					SELECT
						INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
						, ADVER_ID
						, SUM(TOT_EPRS_CNT)TOT_EPRS_CNT, SUM(PAR_EPRS_CNT)PAR_EPRS_CNT, SUM(CLICK_CNT)CLICK_CNT, SUM(ADVRTS_AMT)ADVRTS_AMT, SUM(MEDIA_PYMNT_AMT)MEDIA_PYMNT_AMT
						, SUM(TRGT_EPRS_CNT)TRGT_EPRS_CNT, SUM(TRGT_PAR_EPRS_CNT)TRGT_PAR_EPRS_CNT, SUM(TRGT_CLICK_CNT)TRGT_CLICK_CNT, SUM(TRGT_ADVRTS_AMT)TRGT_ADVRTS_AMT
						, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
					FROM BILLING_TEMP.INTG_CNTR_CAMP_PAR_STATS_TEMP
					WHERE STATS_DTTM =${STATS_DTTM}
						AND INTG_TP_CODE = #{INTG_TP_CODE}
						AND GROUP_FIELD = CAST(${START_POINT} / ${END_POINT} AS INT)
					GROUP BY INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
						, ADVER_ID
					ORDER BY NULL
				) S
		ON DUPLICATE KEY UPDATE
			  INTG_CNTR_ADVER_STATS_TEMP.TOT_EPRS_CNT		= INTG_CNTR_ADVER_STATS_TEMP.TOT_EPRS_CNT		+ S.TOT_EPRS_CNT
			, INTG_CNTR_ADVER_STATS_TEMP.PAR_EPRS_CNT		= INTG_CNTR_ADVER_STATS_TEMP.PAR_EPRS_CNT		+ S.PAR_EPRS_CNT
			, INTG_CNTR_ADVER_STATS_TEMP.CLICK_CNT			= INTG_CNTR_ADVER_STATS_TEMP.CLICK_CNT			+ S.CLICK_CNT
			, INTG_CNTR_ADVER_STATS_TEMP.ADVRTS_AMT			= INTG_CNTR_ADVER_STATS_TEMP.ADVRTS_AMT			+ S.ADVRTS_AMT
			, INTG_CNTR_ADVER_STATS_TEMP.MEDIA_PYMNT_AMT	= INTG_CNTR_ADVER_STATS_TEMP.MEDIA_PYMNT_AMT		+ S.MEDIA_PYMNT_AMT
			, INTG_CNTR_ADVER_STATS_TEMP.TRGT_EPRS_CNT		= INTG_CNTR_ADVER_STATS_TEMP.TRGT_EPRS_CNT		+ S.TRGT_EPRS_CNT
			, INTG_CNTR_ADVER_STATS_TEMP.TRGT_PAR_EPRS_CNT	= INTG_CNTR_ADVER_STATS_TEMP.TRGT_PAR_EPRS_CNT	+ S.TRGT_PAR_EPRS_CNT
			, INTG_CNTR_ADVER_STATS_TEMP.TRGT_CLICK_CNT		= INTG_CNTR_ADVER_STATS_TEMP.TRGT_CLICK_CNT		+ S.TRGT_CLICK_CNT
			, INTG_CNTR_ADVER_STATS_TEMP.TRGT_ADVRTS_AMT	= INTG_CNTR_ADVER_STATS_TEMP.TRGT_ADVRTS_AMT		+ S.TRGT_ADVRTS_AMT
			, INTG_CNTR_ADVER_STATS_TEMP.ALT_USER_ID		='BATCH'
			, INTG_CNTR_ADVER_STATS_TEMP.ALT_DTTM			= NOW();
	</update>
	
	<update id="sql_DUMP_INTGCNTR_CAMP_STATS_TEMP" parameterType="Map">
		INSERT INTO BILLING_TEMP.INTG_CNTR_CAMP_STATS_TEMP(
			INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
			, SITE_CODE, ADVER_ID
			, TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
			, TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT
			, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
			)
				SELECT * FROM (
					SELECT
						INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
						, SITE_CODE, ADVER_ID
						, SUM(TOT_EPRS_CNT)TOT_EPRS_CNT, SUM(PAR_EPRS_CNT)PAR_EPRS_CNT, SUM(CLICK_CNT)CLICK_CNT, SUM(ADVRTS_AMT)ADVRTS_AMT, SUM(MEDIA_PYMNT_AMT)MEDIA_PYMNT_AMT
						, SUM(TRGT_EPRS_CNT)TRGT_EPRS_CNT, SUM(TRGT_PAR_EPRS_CNT)TRGT_PAR_EPRS_CNT, SUM(TRGT_CLICK_CNT)TRGT_CLICK_CNT, SUM(TRGT_ADVRTS_AMT)TRGT_ADVRTS_AMT
						, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
					FROM BILLING_TEMP.INTG_CNTR_CAMP_PAR_STATS_TEMP
					WHERE STATS_DTTM =${STATS_DTTM}
						AND INTG_TP_CODE = #{INTG_TP_CODE}
						AND GROUP_FIELD = CAST(${START_POINT} / ${END_POINT} AS INT)
					GROUP BY INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
						, SITE_CODE, ADVER_ID
					ORDER BY NULL
				) S
		ON DUPLICATE KEY UPDATE
			  INTG_CNTR_CAMP_STATS_TEMP.TOT_EPRS_CNT		= INTG_CNTR_CAMP_STATS_TEMP.TOT_EPRS_CNT		  + S.TOT_EPRS_CNT
			, INTG_CNTR_CAMP_STATS_TEMP.PAR_EPRS_CNT		= INTG_CNTR_CAMP_STATS_TEMP.PAR_EPRS_CNT		  + S.PAR_EPRS_CNT
			, INTG_CNTR_CAMP_STATS_TEMP.CLICK_CNT			= INTG_CNTR_CAMP_STATS_TEMP.CLICK_CNT		  + S.CLICK_CNT
			, INTG_CNTR_CAMP_STATS_TEMP.ADVRTS_AMT			= INTG_CNTR_CAMP_STATS_TEMP.ADVRTS_AMT		  + S.ADVRTS_AMT
			, INTG_CNTR_CAMP_STATS_TEMP.MEDIA_PYMNT_AMT		= INTG_CNTR_CAMP_STATS_TEMP.MEDIA_PYMNT_AMT	  + S.MEDIA_PYMNT_AMT
			, INTG_CNTR_CAMP_STATS_TEMP.TRGT_EPRS_CNT		= INTG_CNTR_CAMP_STATS_TEMP.TRGT_EPRS_CNT	  + S.TRGT_EPRS_CNT
			, INTG_CNTR_CAMP_STATS_TEMP.TRGT_PAR_EPRS_CNT	= INTG_CNTR_CAMP_STATS_TEMP.TRGT_PAR_EPRS_CNT  + S.TRGT_PAR_EPRS_CNT
			, INTG_CNTR_CAMP_STATS_TEMP.TRGT_CLICK_CNT		= INTG_CNTR_CAMP_STATS_TEMP.TRGT_CLICK_CNT	  + S.TRGT_CLICK_CNT
			, INTG_CNTR_CAMP_STATS_TEMP.TRGT_ADVRTS_AMT		= INTG_CNTR_CAMP_STATS_TEMP.TRGT_ADVRTS_AMT	  + S.TRGT_ADVRTS_AMT
			, INTG_CNTR_CAMP_STATS_TEMP.ALT_USER_ID			='BATCH'
			, INTG_CNTR_CAMP_STATS_TEMP.ALT_DTTM			= NOW();
	</update>
	
	<update id="sql_DUMP_INTGCNTR_MEDIA_ADVER_STATS_TEMP" parameterType="Map">
		INSERT INTO BILLING_TEMP.INTG_CNTR_MEDIA_ADVER_STATS_TEMP(
			INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
			, MEDIA_ID, ADVER_ID
			, TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
			, TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT
			, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
			)
				SELECT * FROM (
					SELECT
						INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
						, MEDIA_ID, ADVER_ID
						, SUM(TOT_EPRS_CNT)TOT_EPRS_CNT, SUM(PAR_EPRS_CNT)PAR_EPRS_CNT, SUM(CLICK_CNT)CLICK_CNT, SUM(ADVRTS_AMT)ADVRTS_AMT, SUM(MEDIA_PYMNT_AMT)MEDIA_PYMNT_AMT
						, SUM(TRGT_EPRS_CNT)TRGT_EPRS_CNT, SUM(TRGT_PAR_EPRS_CNT)TRGT_PAR_EPRS_CNT, SUM(TRGT_CLICK_CNT)TRGT_CLICK_CNT, SUM(TRGT_ADVRTS_AMT)TRGT_ADVRTS_AMT
						, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
					FROM BILLING_TEMP.INTG_CNTR_CAMP_PAR_STATS_TEMP
					WHERE STATS_DTTM =${STATS_DTTM}
						AND INTG_TP_CODE = #{INTG_TP_CODE}
						AND GROUP_FIELD = CAST(${START_POINT} / ${END_POINT} AS INT)
					GROUP BY INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
						, MEDIA_ID, ADVER_ID
					ORDER BY NULL
				) S
		ON DUPLICATE KEY UPDATE
			  INTG_CNTR_MEDIA_ADVER_STATS_TEMP.TOT_EPRS_CNT		= INTG_CNTR_MEDIA_ADVER_STATS_TEMP.TOT_EPRS_CNT		+ S.TOT_EPRS_CNT
			, INTG_CNTR_MEDIA_ADVER_STATS_TEMP.PAR_EPRS_CNT		= INTG_CNTR_MEDIA_ADVER_STATS_TEMP.PAR_EPRS_CNT		+ S.PAR_EPRS_CNT
			, INTG_CNTR_MEDIA_ADVER_STATS_TEMP.CLICK_CNT		= INTG_CNTR_MEDIA_ADVER_STATS_TEMP.CLICK_CNT			+ S.CLICK_CNT
			, INTG_CNTR_MEDIA_ADVER_STATS_TEMP.ADVRTS_AMT		= INTG_CNTR_MEDIA_ADVER_STATS_TEMP.ADVRTS_AMT		+ S.ADVRTS_AMT
			, INTG_CNTR_MEDIA_ADVER_STATS_TEMP.MEDIA_PYMNT_AMT	= INTG_CNTR_MEDIA_ADVER_STATS_TEMP.MEDIA_PYMNT_AMT	+ S.MEDIA_PYMNT_AMT
			, INTG_CNTR_MEDIA_ADVER_STATS_TEMP.TRGT_EPRS_CNT	= INTG_CNTR_MEDIA_ADVER_STATS_TEMP.TRGT_EPRS_CNT		+ S.TRGT_EPRS_CNT
			, INTG_CNTR_MEDIA_ADVER_STATS_TEMP.TRGT_PAR_EPRS_CNT= INTG_CNTR_MEDIA_ADVER_STATS_TEMP.TRGT_PAR_EPRS_CNT	+ S.TRGT_PAR_EPRS_CNT
			, INTG_CNTR_MEDIA_ADVER_STATS_TEMP.TRGT_CLICK_CNT	= INTG_CNTR_MEDIA_ADVER_STATS_TEMP.TRGT_CLICK_CNT	+ S.TRGT_CLICK_CNT
			, INTG_CNTR_MEDIA_ADVER_STATS_TEMP.TRGT_ADVRTS_AMT	= INTG_CNTR_MEDIA_ADVER_STATS_TEMP.TRGT_ADVRTS_AMT	+ S.TRGT_ADVRTS_AMT
			, INTG_CNTR_MEDIA_ADVER_STATS_TEMP.ALT_USER_ID		='BATCH'
			, INTG_CNTR_MEDIA_ADVER_STATS_TEMP.ALT_DTTM			= NOW();
	</update>
	
	<update id="sql_DUMP_INTGCNTR_MEDIA_STATS_TEMP" parameterType="Map">
		INSERT INTO BILLING_TEMP.INTG_CNTR_MEDIA_STATS_TEMP(
			INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
			, MEDIA_ID
			, TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
			, TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT
			, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
			)
				SELECT * FROM (
					SELECT
						INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
						, MEDIA_ID
						, SUM(TOT_EPRS_CNT)TOT_EPRS_CNT, SUM(PAR_EPRS_CNT)PAR_EPRS_CNT, SUM(CLICK_CNT)CLICK_CNT, SUM(ADVRTS_AMT)ADVRTS_AMT, SUM(MEDIA_PYMNT_AMT)MEDIA_PYMNT_AMT
						, SUM(TRGT_EPRS_CNT)TRGT_EPRS_CNT, SUM(TRGT_PAR_EPRS_CNT)TRGT_PAR_EPRS_CNT, SUM(TRGT_CLICK_CNT)TRGT_CLICK_CNT, SUM(TRGT_ADVRTS_AMT)TRGT_ADVRTS_AMT
						, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
					FROM BILLING_TEMP.INTG_CNTR_CAMP_PAR_STATS_TEMP
					WHERE STATS_DTTM =${STATS_DTTM}
						AND INTG_TP_CODE = #{INTG_TP_CODE}
						AND GROUP_FIELD = CAST(${START_POINT} / ${END_POINT} AS INT)
					GROUP BY INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
						, MEDIA_ID
					ORDER BY NULL
				) S
		ON DUPLICATE KEY UPDATE
			  INTG_CNTR_MEDIA_STATS_TEMP.TOT_EPRS_CNT		= INTG_CNTR_MEDIA_STATS_TEMP.TOT_EPRS_CNT		+ S.TOT_EPRS_CNT
			, INTG_CNTR_MEDIA_STATS_TEMP.PAR_EPRS_CNT		= INTG_CNTR_MEDIA_STATS_TEMP.PAR_EPRS_CNT		+ S.PAR_EPRS_CNT
			, INTG_CNTR_MEDIA_STATS_TEMP.CLICK_CNT			= INTG_CNTR_MEDIA_STATS_TEMP.CLICK_CNT			+ S.CLICK_CNT
			, INTG_CNTR_MEDIA_STATS_TEMP.ADVRTS_AMT			= INTG_CNTR_MEDIA_STATS_TEMP.ADVRTS_AMT			+ S.ADVRTS_AMT
			, INTG_CNTR_MEDIA_STATS_TEMP.MEDIA_PYMNT_AMT	= INTG_CNTR_MEDIA_STATS_TEMP.MEDIA_PYMNT_AMT		+ S.MEDIA_PYMNT_AMT
			, INTG_CNTR_MEDIA_STATS_TEMP.TRGT_EPRS_CNT		= INTG_CNTR_MEDIA_STATS_TEMP.TRGT_EPRS_CNT		+ S.TRGT_EPRS_CNT
			, INTG_CNTR_MEDIA_STATS_TEMP.TRGT_PAR_EPRS_CNT	= INTG_CNTR_MEDIA_STATS_TEMP.TRGT_PAR_EPRS_CNT	+ S.TRGT_PAR_EPRS_CNT
			, INTG_CNTR_MEDIA_STATS_TEMP.TRGT_CLICK_CNT		= INTG_CNTR_MEDIA_STATS_TEMP.TRGT_CLICK_CNT		+ S.TRGT_CLICK_CNT
			, INTG_CNTR_MEDIA_STATS_TEMP.TRGT_ADVRTS_AMT	= INTG_CNTR_MEDIA_STATS_TEMP.TRGT_ADVRTS_AMT		+ S.TRGT_ADVRTS_AMT
			, INTG_CNTR_MEDIA_STATS_TEMP.ALT_USER_ID		='BATCH'
			, INTG_CNTR_MEDIA_STATS_TEMP.ALT_DTTM			= NOW();
	</update>
	
	<update id="sql_DUMP_INTGCNTR_PAR_STATS_TEMP" parameterType="Map">
		INSERT INTO BILLING_TEMP.INTG_CNTR_PAR_STATS_TEMP(
			INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
			, MEDIA_SCRIPT_NO, MEDIA_ID
			, TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
			, TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT
			, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
			)
				SELECT * FROM (
					SELECT
						INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
						, MEDIA_SCRIPT_NO, MEDIA_ID
						, SUM(TOT_EPRS_CNT)TOT_EPRS_CNT, SUM(PAR_EPRS_CNT)PAR_EPRS_CNT, SUM(CLICK_CNT)CLICK_CNT, SUM(ADVRTS_AMT)ADVRTS_AMT, SUM(MEDIA_PYMNT_AMT)MEDIA_PYMNT_AMT
						, SUM(TRGT_EPRS_CNT)TRGT_EPRS_CNT, SUM(TRGT_PAR_EPRS_CNT)TRGT_PAR_EPRS_CNT, SUM(TRGT_CLICK_CNT)TRGT_CLICK_CNT, SUM(TRGT_ADVRTS_AMT)TRGT_ADVRTS_AMT
						, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
					FROM BILLING_TEMP.INTG_CNTR_CAMP_PAR_STATS_TEMP
					WHERE STATS_DTTM =${STATS_DTTM}
						AND INTG_TP_CODE = #{INTG_TP_CODE}
						AND GROUP_FIELD = CAST(${START_POINT} / ${END_POINT} AS INT)
					GROUP BY INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
						, MEDIA_SCRIPT_NO, MEDIA_ID
					ORDER BY NULL
				) S
		ON DUPLICATE KEY UPDATE
			  INTG_CNTR_PAR_STATS_TEMP.TOT_EPRS_CNT		= INTG_CNTR_PAR_STATS_TEMP.TOT_EPRS_CNT		+ S.TOT_EPRS_CNT
			, INTG_CNTR_PAR_STATS_TEMP.PAR_EPRS_CNT		= INTG_CNTR_PAR_STATS_TEMP.PAR_EPRS_CNT		+ S.PAR_EPRS_CNT
			, INTG_CNTR_PAR_STATS_TEMP.CLICK_CNT		= INTG_CNTR_PAR_STATS_TEMP.CLICK_CNT			+ S.CLICK_CNT
			, INTG_CNTR_PAR_STATS_TEMP.ADVRTS_AMT		= INTG_CNTR_PAR_STATS_TEMP.ADVRTS_AMT		+ S.ADVRTS_AMT
			, INTG_CNTR_PAR_STATS_TEMP.MEDIA_PYMNT_AMT	= INTG_CNTR_PAR_STATS_TEMP.MEDIA_PYMNT_AMT	+ S.MEDIA_PYMNT_AMT
			, INTG_CNTR_PAR_STATS_TEMP.TRGT_EPRS_CNT	 = INTG_CNTR_PAR_STATS_TEMP.TRGT_EPRS_CNT		+ S.TRGT_EPRS_CNT
			, INTG_CNTR_PAR_STATS_TEMP.TRGT_PAR_EPRS_CNT = INTG_CNTR_PAR_STATS_TEMP.TRGT_PAR_EPRS_CNT	+ S.TRGT_PAR_EPRS_CNT
			, INTG_CNTR_PAR_STATS_TEMP.TRGT_CLICK_CNT	= INTG_CNTR_PAR_STATS_TEMP.TRGT_CLICK_CNT	+ S.TRGT_CLICK_CNT
			, INTG_CNTR_PAR_STATS_TEMP.TRGT_ADVRTS_AMT	= INTG_CNTR_PAR_STATS_TEMP.TRGT_ADVRTS_AMT	+ S.TRGT_ADVRTS_AMT
			, INTG_CNTR_PAR_STATS_TEMP.ALT_USER_ID		='BATCH'
			, INTG_CNTR_PAR_STATS_TEMP.ALT_DTTM			= NOW();
	</update>
	
	<update id="sql_DUMP_INTGCNTR_STATS_TEMP" parameterType="Map">
		INSERT INTO BILLING_TEMP.INTG_CNTR_STATS_TEMP(
			INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
			, TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
			, TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT
			, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
			)
				SELECT * FROM (
					SELECT
						INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
						, SUM(TOT_EPRS_CNT)TOT_EPRS_CNT, SUM(PAR_EPRS_CNT)PAR_EPRS_CNT, SUM(CLICK_CNT)CLICK_CNT, SUM(ADVRTS_AMT)ADVRTS_AMT, SUM(MEDIA_PYMNT_AMT)MEDIA_PYMNT_AMT
						, SUM(TRGT_EPRS_CNT)TRGT_EPRS_CNT, SUM(TRGT_PAR_EPRS_CNT)TRGT_PAR_EPRS_CNT, SUM(TRGT_CLICK_CNT)TRGT_CLICK_CNT, SUM(TRGT_ADVRTS_AMT)TRGT_ADVRTS_AMT
						, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
					FROM BILLING_TEMP.INTG_CNTR_CAMP_PAR_STATS_TEMP
					WHERE STATS_DTTM =${STATS_DTTM}
						AND INTG_TP_CODE = #{INTG_TP_CODE}
						AND GROUP_FIELD = CAST(${START_POINT} / ${END_POINT} AS INT)
					GROUP BY INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
					ORDER BY NULL
				) S
		ON DUPLICATE KEY UPDATE
			  INTG_CNTR_STATS_TEMP.TOT_EPRS_CNT		= INTG_CNTR_STATS_TEMP.TOT_EPRS_CNT		+ S.TOT_EPRS_CNT
			, INTG_CNTR_STATS_TEMP.PAR_EPRS_CNT		= INTG_CNTR_STATS_TEMP.PAR_EPRS_CNT		+ S.PAR_EPRS_CNT
			, INTG_CNTR_STATS_TEMP.CLICK_CNT			= INTG_CNTR_STATS_TEMP.CLICK_CNT			+ S.CLICK_CNT
			, INTG_CNTR_STATS_TEMP.ADVRTS_AMT		= INTG_CNTR_STATS_TEMP.ADVRTS_AMT		+ S.ADVRTS_AMT
			, INTG_CNTR_STATS_TEMP.MEDIA_PYMNT_AMT	= INTG_CNTR_STATS_TEMP.MEDIA_PYMNT_AMT	+ S.MEDIA_PYMNT_AMT
			, INTG_CNTR_STATS_TEMP.TRGT_EPRS_CNT		= INTG_CNTR_STATS_TEMP.TRGT_EPRS_CNT		+ S.TRGT_EPRS_CNT
			, INTG_CNTR_STATS_TEMP.TRGT_PAR_EPRS_CNT	= INTG_CNTR_STATS_TEMP.TRGT_PAR_EPRS_CNT	+ S.TRGT_PAR_EPRS_CNT
			, INTG_CNTR_STATS_TEMP.TRGT_CLICK_CNT	= INTG_CNTR_STATS_TEMP.TRGT_CLICK_CNT	+ S.TRGT_CLICK_CNT
			, INTG_CNTR_STATS_TEMP.TRGT_ADVRTS_AMT	= INTG_CNTR_STATS_TEMP.TRGT_ADVRTS_AMT	+ S.TRGT_ADVRTS_AMT
			, INTG_CNTR_STATS_TEMP.ALT_USER_ID		='BATCH'
			, INTG_CNTR_STATS_TEMP.ALT_DTTM			= NOW();
	</update>
	
	
	
	
	
	<!-- SUB 테이블 데이터 적재 -->	
	<update id="sql_DUMP_INTGCNTR_ADVER_PAR_STATS" parameterType="Map">
		INSERT INTO BILLING.INTG_CNTR_ADVER_PAR_STATS(
			INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
			, ADVER_ID, MEDIA_SCRIPT_NO
			, TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
			, TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT
			, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
			)
			SELECT * FROM (
				SELECT INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
					 , ADVER_ID, MEDIA_SCRIPT_NO
					 , TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
					 , TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT , REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
			  	  FROM BILLING_TEMP.INTG_CNTR_ADVER_PAR_STATS_TEMP 
			  	 LIMIT ${START_POINT}, ${END_POINT}
			) S
		ON DUPLICATE KEY UPDATE
			INTG_CNTR_ADVER_PAR_STATS.TOT_EPRS_CNT		= S.TOT_EPRS_CNT
			, INTG_CNTR_ADVER_PAR_STATS.PAR_EPRS_CNT		= S.PAR_EPRS_CNT
			, INTG_CNTR_ADVER_PAR_STATS.CLICK_CNT			= S.CLICK_CNT
			, INTG_CNTR_ADVER_PAR_STATS.ADVRTS_AMT			= S.ADVRTS_AMT
			, INTG_CNTR_ADVER_PAR_STATS.MEDIA_PYMNT_AMT		= S.MEDIA_PYMNT_AMT
			, INTG_CNTR_ADVER_PAR_STATS.TRGT_EPRS_CNT		= S.TRGT_EPRS_CNT
			, INTG_CNTR_ADVER_PAR_STATS.TRGT_PAR_EPRS_CNT	= S.TRGT_PAR_EPRS_CNT
			, INTG_CNTR_ADVER_PAR_STATS.TRGT_CLICK_CNT		= S.TRGT_CLICK_CNT
			, INTG_CNTR_ADVER_PAR_STATS.TRGT_ADVRTS_AMT		= S.TRGT_ADVRTS_AMT
			, INTG_CNTR_ADVER_PAR_STATS.ALT_USER_ID			='BATCH'
			, INTG_CNTR_ADVER_PAR_STATS.ALT_DTTM			= NOW();
	</update>
	
	<update id="sql_DUMP_INTGCNTR_ADVER_STATS" parameterType="Map">
		INSERT INTO BILLING.INTG_CNTR_ADVER_STATS(
			INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
			, ADVER_ID
			, TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
			, TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT
			, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
			)
			SELECT * FROM (
				SELECT INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ , ADVER_ID
					 , TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
					 , TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT
					 , REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
				  FROM BILLING_TEMP.INTG_CNTR_ADVER_STATS_TEMP
				 LIMIT ${START_POINT}, ${END_POINT}
			) S
		ON DUPLICATE KEY UPDATE
			  INTG_CNTR_ADVER_STATS.TOT_EPRS_CNT		= S.TOT_EPRS_CNT
			, INTG_CNTR_ADVER_STATS.PAR_EPRS_CNT		= S.PAR_EPRS_CNT
			, INTG_CNTR_ADVER_STATS.CLICK_CNT			= S.CLICK_CNT
			, INTG_CNTR_ADVER_STATS.ADVRTS_AMT			= S.ADVRTS_AMT
			, INTG_CNTR_ADVER_STATS.MEDIA_PYMNT_AMT		= S.MEDIA_PYMNT_AMT
			, INTG_CNTR_ADVER_STATS.TRGT_EPRS_CNT		= S.TRGT_EPRS_CNT
			, INTG_CNTR_ADVER_STATS.TRGT_PAR_EPRS_CNT	= S.TRGT_PAR_EPRS_CNT
			, INTG_CNTR_ADVER_STATS.TRGT_CLICK_CNT		= S.TRGT_CLICK_CNT
			, INTG_CNTR_ADVER_STATS.TRGT_ADVRTS_AMT		= S.TRGT_ADVRTS_AMT
			, INTG_CNTR_ADVER_STATS.ALT_USER_ID			='BATCH'
			, INTG_CNTR_ADVER_STATS.ALT_DTTM			= NOW();
	</update>
	
	<update id="sql_DUMP_INTGCNTR_CAMP_STATS" parameterType="Map">
		INSERT INTO BILLING.INTG_CNTR_CAMP_STATS(
			INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
			, SITE_CODE, ADVER_ID
			, TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
			, TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT
			, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
			)
				SELECT * FROM (
					SELECT
						  INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
						, SITE_CODE, ADVER_ID
						, TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
						, TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT
						, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
					FROM BILLING_TEMP.INTG_CNTR_CAMP_STATS_TEMP
				   LIMIT ${START_POINT}, ${END_POINT}
				) S
		ON DUPLICATE KEY UPDATE
			  INTG_CNTR_CAMP_STATS.TOT_EPRS_CNT			= S.TOT_EPRS_CNT
			, INTG_CNTR_CAMP_STATS.PAR_EPRS_CNT		    = S.PAR_EPRS_CNT
			, INTG_CNTR_CAMP_STATS.CLICK_CNT			= S.CLICK_CNT
			, INTG_CNTR_CAMP_STATS.ADVRTS_AMT			= S.ADVRTS_AMT
			, INTG_CNTR_CAMP_STATS.MEDIA_PYMNT_AMT		= S.MEDIA_PYMNT_AMT
			, INTG_CNTR_CAMP_STATS.TRGT_EPRS_CNT		= S.TRGT_EPRS_CNT
			, INTG_CNTR_CAMP_STATS.TRGT_PAR_EPRS_CNT	= S.TRGT_PAR_EPRS_CNT
			, INTG_CNTR_CAMP_STATS.TRGT_CLICK_CNT		= S.TRGT_CLICK_CNT
			, INTG_CNTR_CAMP_STATS.TRGT_ADVRTS_AMT		= S.TRGT_ADVRTS_AMT
			, INTG_CNTR_CAMP_STATS.ALT_USER_ID			='BATCH'
			, INTG_CNTR_CAMP_STATS.ALT_DTTM			= NOW();
	</update>
	
	<update id="sql_DUMP_INTGCNTR_MEDIA_ADVER_STATS" parameterType="Map">
		INSERT INTO BILLING.INTG_CNTR_MEDIA_ADVER_STATS(
			INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
			, MEDIA_ID, ADVER_ID
			, TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
			, TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT
			, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
			)
				SELECT * FROM (
					SELECT
						  INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
						, MEDIA_ID, ADVER_ID
						, TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
						, TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT
						, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
					FROM BILLING_TEMP.INTG_CNTR_MEDIA_ADVER_STATS_TEMP
				   LIMIT ${START_POINT}, ${END_POINT}
				) S
		ON DUPLICATE KEY UPDATE
			  INTG_CNTR_MEDIA_ADVER_STATS.TOT_EPRS_CNT		= S.TOT_EPRS_CNT
			, INTG_CNTR_MEDIA_ADVER_STATS.PAR_EPRS_CNT		= S.PAR_EPRS_CNT
			, INTG_CNTR_MEDIA_ADVER_STATS.CLICK_CNT			= S.CLICK_CNT
			, INTG_CNTR_MEDIA_ADVER_STATS.ADVRTS_AMT		= S.ADVRTS_AMT
			, INTG_CNTR_MEDIA_ADVER_STATS.MEDIA_PYMNT_AMT	= S.MEDIA_PYMNT_AMT
			, INTG_CNTR_MEDIA_ADVER_STATS.TRGT_EPRS_CNT		= S.TRGT_EPRS_CNT
			, INTG_CNTR_MEDIA_ADVER_STATS.TRGT_PAR_EPRS_CNT	= S.TRGT_PAR_EPRS_CNT
			, INTG_CNTR_MEDIA_ADVER_STATS.TRGT_CLICK_CNT	= S.TRGT_CLICK_CNT
			, INTG_CNTR_MEDIA_ADVER_STATS.TRGT_ADVRTS_AMT	= S.TRGT_ADVRTS_AMT
			, INTG_CNTR_MEDIA_ADVER_STATS.ALT_USER_ID		='BATCH'
			, INTG_CNTR_MEDIA_ADVER_STATS.ALT_DTTM			= NOW();
	</update>
	
	<update id="sql_DUMP_INTGCNTR_MEDIA_STATS" parameterType="Map">
		INSERT INTO BILLING.INTG_CNTR_MEDIA_STATS(
			INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
			, MEDIA_ID
			, TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
			, TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT
			, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
			)
			SELECT * FROM (
				SELECT INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
					 , MEDIA_ID
					 , TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
					 , TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT
					 , REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
				FROM BILLING_TEMP.INTG_CNTR_MEDIA_STATS_TEMP
			   LIMIT ${START_POINT}, ${END_POINT}
			) S
		ON DUPLICATE KEY UPDATE
			  INTG_CNTR_MEDIA_STATS.TOT_EPRS_CNT		= S.TOT_EPRS_CNT
			, INTG_CNTR_MEDIA_STATS.PAR_EPRS_CNT		= S.PAR_EPRS_CNT
			, INTG_CNTR_MEDIA_STATS.CLICK_CNT			= S.CLICK_CNT
			, INTG_CNTR_MEDIA_STATS.ADVRTS_AMT			= S.ADVRTS_AMT
			, INTG_CNTR_MEDIA_STATS.MEDIA_PYMNT_AMT		= S.MEDIA_PYMNT_AMT
			, INTG_CNTR_MEDIA_STATS.TRGT_EPRS_CNT		= S.TRGT_EPRS_CNT
			, INTG_CNTR_MEDIA_STATS.TRGT_PAR_EPRS_CNT	= S.TRGT_PAR_EPRS_CNT
			, INTG_CNTR_MEDIA_STATS.TRGT_CLICK_CNT		= S.TRGT_CLICK_CNT
			, INTG_CNTR_MEDIA_STATS.TRGT_ADVRTS_AMT		= S.TRGT_ADVRTS_AMT
			, INTG_CNTR_MEDIA_STATS.ALT_USER_ID			='BATCH'
			, INTG_CNTR_MEDIA_STATS.ALT_DTTM			= NOW();
	</update>
	
	<update id="sql_DUMP_INTGCNTR_PAR_STATS" parameterType="Map">
		INSERT INTO BILLING.INTG_CNTR_PAR_STATS(
			INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
			, MEDIA_SCRIPT_NO, MEDIA_ID
			, TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
			, TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT
			, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
			)
				SELECT * FROM (
					SELECT
						  INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
						, MEDIA_SCRIPT_NO, MEDIA_ID
						, TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
						, TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT
						, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
					FROM BILLING_TEMP.INTG_CNTR_PAR_STATS_TEMP
				   LIMIT ${START_POINT}, ${END_POINT}
				) S
		ON DUPLICATE KEY UPDATE
			  INTG_CNTR_PAR_STATS.TOT_EPRS_CNT		= S.TOT_EPRS_CNT
			, INTG_CNTR_PAR_STATS.PAR_EPRS_CNT		= S.PAR_EPRS_CNT
			, INTG_CNTR_PAR_STATS.CLICK_CNT			= S.CLICK_CNT
			, INTG_CNTR_PAR_STATS.ADVRTS_AMT		= S.ADVRTS_AMT
			, INTG_CNTR_PAR_STATS.MEDIA_PYMNT_AMT	= S.MEDIA_PYMNT_AMT
			, INTG_CNTR_PAR_STATS.TRGT_EPRS_CNT		= S.TRGT_EPRS_CNT
			, INTG_CNTR_PAR_STATS.TRGT_PAR_EPRS_CNT	= S.TRGT_PAR_EPRS_CNT
			, INTG_CNTR_PAR_STATS.TRGT_CLICK_CNT	= S.TRGT_CLICK_CNT
			, INTG_CNTR_PAR_STATS.TRGT_ADVRTS_AMT	= S.TRGT_ADVRTS_AMT
			, INTG_CNTR_PAR_STATS.ALT_USER_ID		='BATCH'
			, INTG_CNTR_PAR_STATS.ALT_DTTM			= NOW();
	</update>
	
	<update id="sql_DUMP_INTGCNTR_STATS" parameterType="Map">
		INSERT INTO BILLING.INTG_CNTR_STATS(
			INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
			, TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
			, TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT
			, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
			)
				SELECT * FROM (
					SELECT
						  INTG_TP_CODE, STATS_DTTM, PLTFOM_TP_CODE, ADVRTS_PRDT_CODE, ADVRTS_TP_CODE, INTG_SEQ
						, TOT_EPRS_CNT, PAR_EPRS_CNT, CLICK_CNT, ADVRTS_AMT, MEDIA_PYMNT_AMT
						, TRGT_EPRS_CNT, TRGT_PAR_EPRS_CNT, TRGT_CLICK_CNT, TRGT_ADVRTS_AMT
						, REG_USER_ID, REG_DTTM, ALT_USER_ID, ALT_DTTM
					FROM BILLING_TEMP.INTG_CNTR_STATS_TEMP
				   LIMIT ${START_POINT}, ${END_POINT}
				) S
		ON DUPLICATE KEY UPDATE
			  INTG_CNTR_STATS.TOT_EPRS_CNT		= S.TOT_EPRS_CNT
			, INTG_CNTR_STATS.PAR_EPRS_CNT		= S.PAR_EPRS_CNT
			, INTG_CNTR_STATS.CLICK_CNT			= S.CLICK_CNT
			, INTG_CNTR_STATS.ADVRTS_AMT		= S.ADVRTS_AMT
			, INTG_CNTR_STATS.MEDIA_PYMNT_AMT	= S.MEDIA_PYMNT_AMT
			, INTG_CNTR_STATS.TRGT_EPRS_CNT		= S.TRGT_EPRS_CNT
			, INTG_CNTR_STATS.TRGT_PAR_EPRS_CNT	= S.TRGT_PAR_EPRS_CNT
			, INTG_CNTR_STATS.TRGT_CLICK_CNT	= S.TRGT_CLICK_CNT
			, INTG_CNTR_STATS.TRGT_ADVRTS_AMT	= S.TRGT_ADVRTS_AMT
			, INTG_CNTR_STATS.ALT_USER_ID		='BATCH'
			, INTG_CNTR_STATS.ALT_DTTM			= NOW();
	</update>
	
	
</mapper>